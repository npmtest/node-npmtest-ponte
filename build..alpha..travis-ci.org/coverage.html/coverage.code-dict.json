{"/home/travis/build/npmtest/node-npmtest-ponte/test.js":"/* istanbul instrument in package npmtest_ponte */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ponte/lib.npmtest_ponte.js":"/* istanbul instrument in package npmtest_ponte */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ponte = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ponte = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ponte/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ponte && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ponte */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ponte\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ponte.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ponte.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ponte.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ponte.__dirname + '/lib.npmtest_ponte.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ponte/node_modules/ponte/lib/ponte.js":"'use strict';\n/*******************************************************************************\n * Copyright (c) 2013-2014 Matteo Collina\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at \n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at \n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Matteo Collina - initial API and implementation and/or initial documentation\n *******************************************************************************/\n\nvar async = require(\"async\");\nvar servers = require(\"./servers.js\");\nvar EventEmitter = require(\"events\").EventEmitter;\nvar util = require(\"util\");\nvar xtend = require(\"xtend\");\n\nfunction Ponte(opts, done) {\n  if (!(this instanceof Ponte)) {\n    return new Ponte(opts, done);\n  }\n\n  if (typeof opts === \"function\") {\n    done = opts;\n    opts = {};\n  }\n\n  this.options = opts;\n\n  var that = this;\n\n  async.eachSeries(servers, function(obj, cb) {\n    opts[obj.service] = xtend(obj.defaults, opts[obj.service]);\n    opts[obj.service].ponte = that;\n    obj.factory(opts[obj.service], function(err, instance) {\n      that[obj.service] = instance;\n      cb(err);\n    });\n  }, function(err) {\n    if (done) {\n      done(err, that);\n    }\n  });\n}\n\nutil.inherits(Ponte, EventEmitter);\n\nPonte.prototype.close = function close(done) {\n  var that = this;\n  var reversed = [].concat(servers).reverse();\n  async.eachSeries(reversed, function closeEverything(obj, cb) {\n    if (typeof that[obj.service].close === \"function\") {\n      that[obj.service].close(cb);\n    } else {\n      cb();\n    }\n  }, done);\n};\n\nPonte.cli = require(\"./cli\");\n\nmodule.exports = Ponte;\n","/home/travis/build/npmtest/node-npmtest-ponte/node_modules/ponte/lib/servers.js":"'use strict';\n/*******************************************************************************\n * Copyright (c) 2013-2014 Matteo Collina\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at \n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at \n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Matteo Collina - Extracted from ponte.js file.\n *******************************************************************************/\n\nvar mosca = require(\"mosca\");\nvar HTTP = require(\"./http\");\nvar CoAP = require(\"./coap\");\nvar persistence = require(\"./persistence\");\nvar ascoltatori = require(\"ascoltatori\");\nvar bunyan = require(\"bunyan\");\nvar xtend = require(\"xtend\");\n\nmodule.exports = [{\n  service: \"logger\",\n  factory: function(opts, done) {\n    delete opts.ponte;\n    done(null, bunyan.createLogger(opts));\n  },\n  defaults: {\n    name: \"ponte\",\n    level: 40\n  }\n}, {\n  service: 'broker',\n  defaults: {\n    wildcardOne: '+',\n    wildcardSome: '#',\n    separator: '/'\n  },\n  factory: function(opts, done) {\n    opts.json = false;\n    ascoltatori.build(opts, function(err, ascoltatore) {\n      done(null, ascoltatore);\n    });\n  }\n}, {\n  service: \"persistence\",\n  factory: persistence,\n  defaults: {\n    type: \"memory\"\n  }\n}, {\n  service: \"mqtt\",\n  factory: function(opts, cb) {\n    opts.ascoltatore = opts.ponte.broker;\n    opts.logger = xtend(opts.logger || {}, {\n      childOf: opts.ponte.logger,\n      level: opts.ponte.logger.level(),\n      service: \"MQTT\"\n    });\n    var server = new mosca.Server(opts, function(err, instance) {\n      if (typeof opts.authenticate === \"function\") {\n        server.authenticate = opts.authenticate;\n      }\n      if (typeof opts.authorizePublish === \"function\") {\n        server.authorizePublish = opts.authorizePublish;\n      }\n      if (typeof opts.authorizeSubscribe === \"function\") {\n        server.authorizeSubscribe = opts.authorizeSubscribe;\n      }\n      cb(err, instance);\n    });\n    server.on('published', function moscaPonteEvent(packet) {\n      if (packet.retain) {\n        opts.ponte.emit('updated', packet.topic, packet.payload);\n      }\n    });\n    opts.ponte.persistence.wire(server);\n  }\n}, {\n  service: \"http\",\n  factory: HTTP,\n  defaults: {\n    port: 3000,\n    serveLibraries: true,\n    publicDirs: {\n      ponte: __dirname + \"/../public\",\n      mosca: __dirname + \"/../node_modules/mosca/public\"\n    }\n  }\n}, {\n  service: \"coap\",\n  factory: CoAP,\n  defaults: {\n    port: 5683\n  }\n}];\n","/home/travis/build/npmtest/node-npmtest-ponte/node_modules/ponte/lib/http.js":"'use strict';\n/*******************************************************************************\n * Copyright (c) 2013-2014 Matteo Collina\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at\n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Matteo Collina - initial API and implementation and/or initial documentation\n *******************************************************************************/\n\nvar http = require(\"http\");\nvar resourcesRegexp = /^\\/resources\\/(.+)$/;\nvar callback = require(\"callback-stream\");\nvar bunyan = require(\"bunyan\");\nvar st = require(\"st\");\nvar corsify = require(\"corsify\");\n\nfunction HTTP(opts, done) {\n  if (!(this instanceof HTTP)) {\n    return new HTTP(opts, done);\n  }\n\n  if (typeof opts === \"function\") {\n    done = opts;\n    opts = {};\n  }\n\n  var that = this;\n  this._persistence = opts.ponte.persistence;\n  this._ponte = opts.ponte;\n\n  if (typeof opts.authenticate === \"function\") {\n    this.authenticate = opts.authenticate;\n  }\n\n  if (typeof opts.authorizeGet === \"function\") {\n    this.authorizeGet = opts.authorizeGet;\n  }\n\n  if (typeof opts.authorizePut === \"function\") {\n    this.authorizePut = opts.authorizePut;\n  }\n\n  var logger = this._logger = opts.ponte.logger.child({\n    service: 'HTTP',\n    serializers: {\n      req: bunyan.stdSerializers.req,\n      res: bunyan.stdSerializers.res\n    }\n  });\n  this.server = http.createServer(this.buildServer(opts));\n  this.server.listen(opts.port, opts.host, function(err) {\n    done(err, that);\n    logger.info({ port: opts.port }, \"server started\");\n  });\n\n  if (this._ponte.mqtt) {\n    this._ponte.mqtt.attachHttpServer(this.server);\n  }\n}\n\nHTTP.prototype.close = function(done) {\n  this.server.close(done);\n};\n\nHTTP.prototype.buildServer = function(opts) {\n  var logger = this._logger;\n  var persistence = this._persistence;\n  var ponte = this._ponte;\n\n  var authenticate = this.authenticate;\n  var authorizeGet = this.authorizeGet;\n  var authorizePut = this.authorizePut;\n\n  function handleAuthError(err, res) {\n    logger.info(err);\n    res.statusCode = 500;\n    res.end();\n  }\n\n  function handleNotAuthenticated(res) {\n    logger.info('authentication denied');\n    res.statusCode = 401;\n    res.end();\n  }\n\n  function handleNotAuthorized(res) {\n    logger.info('not authorized');\n    res.statusCode = 403;\n    res.end();\n  }\n\n  var handlePontePublic = st(opts.publicDirs.ponte, {\n    index: false,\n    passthrough: true,\n    dot: opts.publicDirs.mosca.match(/(^|\\/)\\./)\n  });\n  \n  var handleMoscaPublic = st(opts.publicDirs.mosca, {\n    index: false,\n    passthrough: false,\n    dot: opts.publicDirs.mosca.match(/(^|\\/)\\./)\n  });\n\n  function handleGetResource(subject, topic, req, res) {\n    if (req.method !== 'GET') {\n      return false;\n    }\n\n    authorizeGet(subject, topic, function(err, authorized) {\n      if (err) {\n        handleAuthError(err, res);\n        return;\n      }\n\n      if (!authorized) {\n        handleNotAuthorized(res);\n        return;\n      }\n\n      persistence.lookupRetained(topic, function(err, packets) {\n        if (packets.length === 0) {\n          res.statusCode = 404;\n          res.end('Not found');\n        } else {\n          res.end(packets[0].payload);\n        }\n      });\n\n    });\n\n    return true;\n  }\n\n  function handlePutResource(subject, topic, req, res) {\n    if (req.method !== 'PUT' && req.method !== 'POST') {\n      return false;\n    }\n\n    req.pipe(callback(function(err, payload) {\n      payload = payload[0];\n\n      if (typeof payload === \"undefined\") {\n        payload = \"\";\n      }\n\n      authorizePut(subject, topic, payload, function(err, authorized) {\n        if (err) {\n          handleAuthError(err, res);\n          return;\n        }\n\n        if (!authorized) {\n          handleNotAuthorized(res);\n          return;\n        }\n\n        var packet = { topic: topic, payload: payload, retain: true };\n        persistence.storeRetained(packet, function() {\n          ponte.broker.publish(topic, payload, {}, function() {\n            res.setHeader('Location', '/resources/' + topic);\n            res.statusCode = 204;\n            res.end();\n            ponte.emit('updated', topic, new Buffer(payload));\n          });\n        });\n\n      });\n    }));\n\n    return true;\n  }\n\n  function handleNotFound(res) {\n    res.writeHeader(404);\n    res.end(\"Not Found\");\n  }\n\n  return corsify({\n    endOptions: true\n  }, function httpServer(req, res) {\n    logger.info({ req: req });\n\n    res.on('finish', function() {\n      logger.info({ res: res });\n    });\n\n    // Only authenticate requests to the resources\n    var match = req.url.match(resourcesRegexp);\n    if (match) {\n      var topic = match[1];\n\n      authenticate(req, function(err, authenticated, subject) {\n        if (err) {\n          handleAuthError(err, res);\n          return;\n        }\n\n        if (!authenticated) {\n          handleNotAuthenticated(res);\n          return;\n        }\n\n        var handled =\n          handleGetResource(subject, topic, req, res) ||\n          handlePutResource(subject, topic, req, res);\n\n        if (!handled) {\n          handleNotFound(res);\n        }\n      });\n    } else {\n      // Public libraries do not require authentication\n      if (opts.serveLibraries) {\n        handlePontePublic(req, res, function() {\n          handleMoscaPublic(req, res);\n        });\n      } else {\n        handleNotFound(res);\n      }\n    }\n  });\n};\n\n/**\n * The function that will be used to authenticate requests.\n * This default implementation authenticates everybody.\n * The returned subject is just a new Object.\n *\n * @param {Object} req The request object\n * @param {Function} cb The callback function. Has the following structure: cb(err, authenticated, subject)\n */\nHTTP.prototype.authenticate = function(req, cb) {\n  cb(null, true, {});\n};\n\n/**\n * The function that will be used to authorize subjects to GET messages from topics.\n * This default implementation authorizes everybody.\n *\n * @param {Object} subject The subject returned by the authenticate function\n * @param {string} topic The topic\n * @param {Function} cb The callback function. Has the following structure: cb(err, authorized)\n */\nHTTP.prototype.authorizeGet = function(subject, topic, cb) {\n  cb(null, true);\n};\n\n/**\n * The function that will be used to authorize subjects to PUT messages to topics.\n * This default implementation authorizes everybody.\n *\n * @param {Object} subject The subject returned by the authenticate function\n * @param {string} topic The topic\n * @param {string} payload The payload\n * @param {Function} cb The callback function. Has the following structure: cb(err, authorized)\n */\nHTTP.prototype.authorizePut = function(subject, topic, payload, cb) {\n  cb(null, true);\n};\n\nmodule.exports = HTTP;\n","/home/travis/build/npmtest/node-npmtest-ponte/node_modules/ponte/lib/coap.js":"'use strict';\n/*******************************************************************************\n * Copyright (c) 2013-2014 Matteo Collina\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at \n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at \n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Matteo Collina - initial API and implementation and/or initial documentation\n *******************************************************************************/\n\nvar coap = require('coap');\nvar rRegexp = /^\\/r\\/(.+)$/;\nvar callback = require(\"callback-stream\");\n\nfunction CoAP(opts, done) {\n  if (!(this instanceof CoAP)) {\n    return new CoAP(opts, done);\n  }\n\n  if (typeof opts === \"function\") {\n    done = opts;\n    opts = {};\n  }\n\n  var that = this;\n\n  this._persistence = opts.ponte.persistence;\n  this._broker = opts.ponte.broker;\n  this._ponte = opts.ponte;\n  \n  if (typeof opts.authenticate === \"function\") {\n    this.authenticate = opts.authenticate;\n  }\n  \n  if (typeof opts.authorizeGet === \"function\") {\n    this.authorizeGet = opts.authorizeGet;\n  }\n  \n  if (typeof opts.authorizePut === \"function\") {\n    this.authorizePut = opts.authorizePut;\n  }\n\n  var logger = this._logger = opts.ponte.logger.child({ service: 'CoAP' });\n\n  this.server = coap.createServer(function handler(req, res) {\n    var match = req.url.match(rRegexp);\n    var topic;\n\n    req.on('error', function(err) {\n      logger.info(err);\n    });\n\n    res.on('error', function(err) {\n      logger.info(err);\n    });\n\n    logger.info({ url: req.url, code: req.code, sender: req.rsinfo, headers: req.headers }, 'request received');\n\n    if (match) {\n      topic = match[1];\n      that.authenticate(req, function(err, authenticated, subject) {\n        if (err) {\n          that._handleAuthError(err, res);\n          return;\n        }\n        \n        if (!authenticated) {\n          that._handleNotAuthenticated(res);\n          return;\n        }\n        \n        if (req.method === 'GET') {\n          that.authorizeGet(subject, topic, function(err, authorized) {\n            if (err) {\n              that._handleAuthError(err, res);\n              return;\n            }\n            \n            if (!authorized) {\n              that._handleNotAuthorized(res);\n              return;\n            }\n            \n            that._handleGET(topic, req, res);\n          });\n        } else if (req.method === 'PUT') {\n          req.pipe(callback(function(err, payload) {\n            payload = Buffer.concat(payload);\n            \n            that.authorizePut(subject, topic, payload, function(err, authorized) {\n              if (err) {\n                that._handleAuthError(err, res);\n                return;\n              }\n              \n              if (!authorized) {\n                that._handleNotAuthorized(res);\n                return;\n              }\n              \n              that._handlePUT(topic, payload, res);\n            });\n            \n          }));\n        }\n      });\n    } else {\n      res.statusCode = '4.04';\n      res.end();\n    }\n  });\n\n  this.server.listen(opts.port, opts.host, function(err) {\n    done(err, that);\n    logger.info({ port: opts.port }, \"server started\");\n  });\n}\n\nCoAP.prototype.close = function(done) {\n  this.server.close(done);\n};\n\nCoAP.prototype._handleGET = function(topic, req, res) {\n  var that = this;\n  var deliver = 'end';\n  var logger = this._logger;\n  var cb = function(topic, payload) {\n    logger.debug({ url: req.url, code: req.code, sender: req.rsinfo }, 'sending update');\n    res.write(payload);\n  };\n\n  that._persistence.lookupRetained(topic, function(err, packets) {\n    if (packets.length === 0) {\n      logger.info({ url: req.url, code: req.code, sender: req.rsinfo }, 'not found');\n      res.statusCode = '4.04';\n      return res.end();\n    }\n\n    if (req.headers.Observe === 0) {\n      logger.debug({ url: req.url, code: req.code, sender: req.rsinfo }, 'registering for topic');\n\n      deliver = 'write';\n      that._broker.subscribe(topic, cb);\n\n      req.on('error', function() {\n        that._broker.unsubscribe(topic, cb);\n      });\n\n      res.on('finish', function() {\n        that._broker.unsubscribe(topic, cb);\n      });\n    }\n\n    logger.debug({ url: req.url, code: req.code, sender: req.rsinfo }, 'delivering retained');\n\n    res[deliver](packets[0].payload);\n  });\n};\n\nCoAP.prototype._handlePUT = function(topic, payload, res) {\n  var that = this;\n  \n  var packet = { topic: topic, payload: payload, retain: true };\n\n  that._persistence.storeRetained(packet, function() {\n    that._broker.publish(topic, payload, {}, function() {\n      res.setOption('Location-Path', '/r/' + topic);\n      res.statusCode = '2.04';\n      res.end();\n\n      that._ponte.emit('updated', topic, payload);\n    });\n  });\n};\n\n\n/**\n * The function that will be used to authenticate requests.\n * This default implementation authenticates everybody.\n * The returned subject is just a new Object.\n *\n * @param {Object} req The incoming message @link https://github.com/mcollina/node-coap#incoming\n * @param {Function} cb The callback function. Has the following structure: cb(err, authenticated, subject)\n */\nCoAP.prototype.authenticate = function(req, cb) {\n  cb(null, true, {});\n};\n\n/**\n * The function that will be used to authorize subjects to GET messages from topics.\n * This default implementation authorizes everybody.\n * \n * @param {Object} subject The subject returned by the authenticate function\n * @param {string} topic The topic\n * @param {Function} cb The callback function. Has the following structure: cb(err, authorized)\n */\nCoAP.prototype.authorizeGet = function(subject, topic, cb) {\n  cb(null, true);\n};\n\n/**\n * The function that will be used to authorize subjects to PUT messages to topics.\n * This default implementation authorizes everybody.\n * \n * @param {Object} subject The subject returned by the authenticate function\n * @param {string} topic The topic\n * @param {Buffer} payload The payload\n * @param {Function} cb The callback function. Has the following structure: cb(err, authorized)\n */\nCoAP.prototype.authorizePut = function(subject, topic, payload, cb) {\n  cb(null, true);\n};\n\nCoAP.prototype._handleAuthError = function(err, res) {\n  this._logger.info(err);\n  res.statusCode = '5.00';\n  res.end();\n};\n\nCoAP.prototype._handleNotAuthenticated = function(res) {\n  this._logger.info('authentication denied');\n  res.statusCode = '4.01';\n  res.end();\n};\n\nCoAP.prototype._handleNotAuthorized = function(res) {\n  this._logger.info('not authorized');\n  res.statusCode = '4.03';\n  res.end();\n};\n\nmodule.exports = CoAP;\n","/home/travis/build/npmtest/node-npmtest-ponte/node_modules/ponte/lib/persistence.js":"'use strict';\n/*******************************************************************************\n * Copyright (c) 2013-2014 Matteo Collina\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at \n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at \n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Matteo Collina - initial API and implementation and/or initial documentation\n *******************************************************************************/\n\nvar persistences = Object.create(require(\"mosca\").persistence);\npersistences.level = persistences.LevelUp;\npersistences.redis = persistences.Redis;\npersistences.memory = persistences.Memory;\npersistences.mongo = persistences.Mongo;\n\nmodule.exports = function(opts, done) {\n  var factory = persistences[opts.type];\n\n  if (opts.type === \"memory\") {\n    done(null, factory(opts));\n  } else {\n    factory(opts, done);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ponte/node_modules/ponte/lib/cli.js":"'use strict';\n/*******************************************************************************\n * Copyright (c) 2013-2014 Matteo Collina\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at \n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at \n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Matteo Collina - initial API and implementation and/or initial documentation\n *******************************************************************************/\n\nvar commander = require(\"commander\");\nvar pkg = require(\"../package.json\");\nvar path = require(\"path\");\n\nmodule.exports = function(args, done) {\n\n  args = args || [];\n\n  var program = new commander.Command();\n  var server = null;\n  var runned = false;\n\n  program\n    .version(pkg.version)\n    .option(\"-m, --mqtt-port <n>\", \"the mqtt port to listen to\", parseInt)\n    .option(\"-p, --http-port <n>\", \"the http port to listen to\", parseInt)\n    .option(\"-a, --coap-port <n>\", \"the coap port to listen to\", parseInt)\n    .option(\"--host <host>\", \"the host to listen to\")\n    .option(\"--coap-host <host>\", \"the host to listen to for coap requests\")\n    .option(\"--mqtt-host <host>\", \"the host to listen to for mqtt requests\")\n    .option(\"--http-host <host>\", \"the host to listen to for http requests\")\n    .option(\"-d, --db <path>\", \"the path were to store the database\")\n    .option(\"-c, --config <c>\", \"the config file to use (override every other option)\")\n    .option(\"-v, --verbose\", \"set the bunyan log to INFO\")\n    .option(\"--very-verbose\", \"set the bunyan log to DEBUG\");\n\n  program.parse(args);\n\n  var opts = {\n    logger: {},\n    http: {},\n    mqtt: {},\n    coap: {},\n    persistence: {}\n  };\n\n  if (program.verbose) {\n    opts.logger.level = 30;\n  } else if (program.veryVerbose) {\n    opts.logger.level = 20;\n  }\n\n  if (program.httpPort) {\n    opts.http.port = program.httpPort;\n  }\n\n  if (program.mqttPort) {\n    opts.mqtt.port = program.mqttPort;\n  }\n\n  if (program.coapPort) {\n    opts.coap.port = program.coapPort;\n  }\n\n  if (program.host) {\n    opts.coap.host = program.host;\n    opts.mqtt.host = program.host;\n    opts.http.host = program.host;\n  }\n\n  if (program.coapHost) {\n    opts.coap.host = program.coapHost;\n  }\n\n  if (program.mqttHost) {\n    opts.mqtt.host = program.mqttHost;\n  }\n\n  if (program.httpHost) {\n    opts.http.host = program.httpHost;\n  }\n\n  if (program.db) {\n    opts.persistence.path = program.db;\n    opts.persistence.type = \"level\";\n  }\n\n  if (program.config) {\n    opts = require(path.resolve(program.config));\n  }\n\n  return this(opts, done);\n};\n","/home/travis/build/npmtest/node-npmtest-ponte/node_modules/ponte/public/mqttws31.js":"/*******************************************************************************\n * Copyright (c) 2013 IBM Corp.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution. \n *\n * The Eclipse Public License is available at \n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at \n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Andrew Banks - initial API and implementation and initial documentation\n *******************************************************************************/\n\n\n// Only expose a single object name in the global namespace.\n// Everything must go through this module. Global Messaging module\n// only has a single public function, client, which returns\n// a Messaging client object given connection details.\n \n/**\n * Send and receive messages using web browsers.\n * <p> \n * This programming interface lets a JavaScript client application use the MQTT V3.1 protocol to \n * connect to an MQTT-supporting messaging server.\n *  \n * The function supported includes:\n * <ol>\n * <li>Connecting to and disconnecting from a server. The server is identified by its host name and port number. \n * <li>Specifying options that relate to the communications link with the server, \n * for example the frequency of keep-alive heartbeats, and whether SSL/TLS is required.\n * <li>Subscribing to and receiving messages from MQTT Topics.\n * <li>Publishing messages to MQTT Topics.\n * </ol>\n * <p>\n * The API consists of two main objects:\n * <dl>\n * <dt><b>{@link Messaging.Client}</b></dt>\n * <dd>This contains methods that provide the functionality of the API,\n * including provision of callbacks that notify the application when a message\n * arrives from or is delivered to the messaging server,\n * or when the status of its connection to the messaging server changes.</dd>\n * <dt><b>{@link Messaging.Message}</b></dt>\n * <dd>This encapsulates the payload of the message along with various attributes\n * associated with its delivery, in particular the destination to which it has\n * been (or is about to be) sent.</dd>\n * </dl> \n * <p>\n * The programming interface validates parameters passed to it, and will throw\n * an Error containing an error message intended for developer use, if it detects\n * an error with any parameter.\n * <p>\n * Example:\n * \n * <code><pre>\nclient = new Messaging.Client(location.hostname, Number(location.port), \"clientId\");\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived;\nclient.connect({onSuccess:onConnect});\n\nfunction onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onConnect\");\n  client.subscribe(\"/World\");\n  message = new Messaging.Message(\"Hello\");\n  message.destinationName = \"/World\";\n  client.send(message); \n};\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0)\n\tconsole.log(\"onConnectionLost:\"+responseObject.errorMessage);\n};\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\"+message.payloadString);\n  client.disconnect(); \n};\t\n * </pre></code>\n * @namespace Messaging \n */\n\nMessaging = (function (global) {\n\n\t// Private variables below, these are only visible inside the function closure\n\t// which is used to define the module. \n\n\tvar version = \"@VERSION@\";\n\tvar buildLevel = \"@BUILDLEVEL@\";\n\t\n\t/** \n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private \n\t */\n\tvar MESSAGE_TYPE = {\n\t\tCONNECT: 1, \n\t\tCONNACK: 2, \n\t\tPUBLISH: 3,\n\t\tPUBACK: 4,\n\t\tPUBREC: 5, \n\t\tPUBREL: 6,\n\t\tPUBCOMP: 7,\n\t\tSUBSCRIBE: 8,\n\t\tSUBACK: 9,\n\t\tUNSUBSCRIBE: 10,\n\t\tUNSUBACK: 11,\n\t\tPINGREQ: 12,\n\t\tPINGRESP: 13,\n\t\tDISCONNECT: 14\n\t};\n\t\n\t// Collection of utility methods used to simplify module code \n\t// and promote the DRY pattern.  \n\n\t/**\n\t * Validate an object's parameter names to ensure they \n\t * match a list of expected variables name for this option\n\t * type. Used to ensure option object passed into the API don't\n\t * contain erroneous parameters.\n\t * @param {Object} obj - User options object\n\t * @param {Object} keys - valid keys and types that may exist in obj. \n\t * @throws {Error} Invalid option parameter found. \n\t * @private \n\t */\n\tvar validate = function(obj, keys) {\n\t\tfor(key in obj) {\n\t\t\tif (obj.hasOwnProperty(key)) {       \t\t\n\t\t\t\tif (keys.hasOwnProperty(key)) {\n\t\t\t\t\tif (typeof obj[key] !== keys[key])\n\t\t\t\t\t   throw new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));\n\t\t\t\t} else {\t\n\t\t\t\t\tvar errorStr = \"Unknown property, \" + key + \". Valid properties are:\";\n\t\t\t\t\tfor (key in keys)\n\t\t\t\t\t\tif (keys.hasOwnProperty(key))\n\t\t\t\t\t\t\terrorStr = errorStr+\" \"+key;\n\t\t\t\t\tthrow new Error(errorStr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Return a new function which runs the user function bound\n\t * to a fixed scope. \n\t * @param {function} User function\n\t * @param {object} Function scope  \n\t * @return {function} User function bound to another scope\n\t * @private \n\t */\n\tvar scope = function (f, scope) {\n\t\treturn function () {\n\t\t\treturn f.apply(scope, arguments);\n\t\t};\n\t};\n\t\n\t/** \n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private \n\t */\n\tvar ERROR = {\n\t\tOK: {code:0, text:\"AMQJSC0000I OK.\"},\n\t\tCONNECT_TIMEOUT: {code:1, text:\"AMQJSC0001E Connect timed out.\"},\n\t\tSUBSCRIBE_TIMEOUT: {code:2, text:\"AMQJS0002E Subscribe timed out.\"}, \n\t\tUNSUBSCRIBE_TIMEOUT: {code:3, text:\"AMQJS0003E Unsubscribe timed out.\"},\n\t\tPING_TIMEOUT: {code:4, text:\"AMQJS0004E Ping timed out.\"},\n\t\tINTERNAL_ERROR: {code:5, text:\"AMQJS0005E Internal error.\"},\n\t\tCONNACK_RETURNCODE: {code:6, text:\"AMQJS0006E Bad Connack return code:{0} {1}.\"},\n\t\tSOCKET_ERROR: {code:7, text:\"AMQJS0007E Socket error:{0}.\"},\n\t\tSOCKET_CLOSE: {code:8, text:\"AMQJS0008I Socket closed.\"},\n\t\tMALFORMED_UTF: {code:9, text:\"AMQJS0009E Malformed UTF data:{0} {1} {2}.\"},\n\t\tUNSUPPORTED: {code:10, text:\"AMQJS0010E {0} is not supported by this browser.\"},\n\t\tINVALID_STATE: {code:11, text:\"AMQJS0011E Invalid state {0}.\"},\n\t\tINVALID_TYPE: {code:12, text:\"AMQJS0012E Invalid type {0} for {1}.\"},\n\t\tINVALID_ARGUMENT: {code:13, text:\"AMQJS0013E Invalid argument {0} for {1}.\"},\n\t\tUNSUPPORTED_OPERATION: {code:14, text:\"AMQJS0014E Unsupported operation.\"},\n\t\tINVALID_STORED_DATA: {code:15, text:\"AMQJS0015E Invalid data in local storage key={0} value={1}.\"},\n\t\tINVALID_MQTT_MESSAGE_TYPE: {code:16, text:\"AMQJS0016E Invalid MQTT message type {0}.\"},\n\t\tMALFORMED_UNICODE: {code:17, text:\"AMQJS0017E Malformed Unicode string:{0} {1}.\"},\n\t};\n\t\n\t/** CONNACK RC Meaning. */\n\tvar CONNACK_RC = {\n\t\t0:\"Connection Accepted\",\n\t\t1:\"Connection Refused: unacceptable protocol version\",\n\t\t2:\"Connection Refused: identifier rejected\",\n\t\t3:\"Connection Refused: server unavailable\",\n\t\t4:\"Connection Refused: bad user name or password\",\n\t\t5:\"Connection Refused: not authorized\"\n\t};\n\n\t/**\n\t * Format an error message text.\n\t * @private\n\t * @param {error} ERROR.KEY value above.\n\t * @param {substitutions} [array] substituted into the text.\n\t * @return the text with the substitutions made.\n\t */\n\tvar format = function(error, substitutions) {\n\t\tvar text = error.text;\n\t\tif (substitutions) {\n\t\t  for (var i=0; i<substitutions.length; i++) {\n\t\t\tfield = \"{\"+i+\"}\";\n\t\t\tstart = text.indexOf(field);\n\t\t\tif(start > 0) {\n\t\t\t\tvar part1 = text.substring(0,start);\n\t\t\t\tvar part2 = text.substring(start+field.length);\n\t\t\t\ttext = part1+substitutions[i]+part2;\n\t\t\t}\n\t\t  }\n\t\t}\n\t\treturn text;\n\t};\n\t\n\t//MQTT protocol and version        6    M    Q    I    s    d    p    3\n\tvar MqttProtoIdentifier = [0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70,0x03];\n\t\n\t/**\n\t * Construct an MQTT wire protocol message.\n\t * @param type MQTT packet type.\n\t * @param options optional wire message attributes.\n\t * \n\t * Optional properties\n\t * \n\t * messageIdentifier: message ID in the range [0..65535]\n\t * payloadMessage:\tApplication Message - PUBLISH only\n\t * connectStrings:\tarray of 0 or more Strings to be put into the CONNECT payload\n\t * topics:\t\t\tarray of strings (SUBSCRIBE, UNSUBSCRIBE)\n\t * requestQoS:\t\tarray of QoS values [0..2]\n\t *  \n\t * \"Flag\" properties \n\t * cleanSession:\ttrue if present / false if absent (CONNECT)\n\t * willMessage:  \ttrue if present / false if absent (CONNECT)\n\t * isRetained:\t\ttrue if present / false if absent (CONNECT)\n\t * userName:\t\ttrue if present / false if absent (CONNECT)\n\t * password:\t\ttrue if present / false if absent (CONNECT)\n\t * keepAliveInterval:\tinteger [0..65535]  (CONNECT)\n\t *\n\t * @private\n\t * @ignore\n\t */\n\tvar WireMessage = function (type, options) { \t\n\t\tthis.type = type;\n\t\tfor(name in options) {\n\t\t\tif (options.hasOwnProperty(name)) {\n\t\t\t\tthis[name] = options[name];\n\t\t\t}\n\t\t}\n\t};\n\t\n\tWireMessage.prototype.encode = function() {\n\t\t// Compute the first byte of the fixed header\n\t\tvar first = ((this.type & 0x0f) << 4);\n\t\t\n\t\t/*\n\t\t * Now calculate the length of the variable header + payload by adding up the lengths\n\t\t * of all the component parts\n\t\t */\n\n\t\tremLength = 0;\n\t\ttopicStrLength = new Array();\n\t\t\n\t\t// if the message contains a messageIdentifier then we need two bytes for that\n\t\tif (this.messageIdentifier != undefined)\n\t\t\tremLength += 2;\n\n\t\tswitch(this.type) {\n\t\t\t// If this a Connect then we need to include 12 bytes for its header\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tremLength += MqttProtoIdentifier.length + 3;\n\t\t\t\tremLength += UTF8Length(this.clientId) + 2;\n\t\t\t\tif (this.willMessage != undefined) {\n\t\t\t\t\tremLength += UTF8Length(this.willMessage.destinationName) + 2;\n\t\t\t\t\t// Will message is always a string, sent as UTF-8 characters with a preceding length.\n\t\t\t\t\tvar willMessagePayloadBytes = this.willMessage.payloadBytes;\n\t\t\t\t\tif (!(willMessagePayloadBytes instanceof Uint8Array))\n\t\t\t\t\t\twillMessagePayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\t\tremLength += willMessagePayloadBytes.byteLength +2;\n\t\t\t\t}\n\t\t\t\tif (this.userName != undefined)\n\t\t\t\t\tremLength += UTF8Length(this.userName) + 2;\n\t\t\t\tif (this.password != undefined)\n\t\t\t\t\tremLength += UTF8Length(this.password) + 2;\n\t\t\tbreak;\n\n\t\t\t// Subscribe, Unsubscribe can both contain topic strings\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\t        \t\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tremLength += this.requestedQos.length; // 1 byte for each topic's Qos\n\t\t\t\t// QoS on Subscribe only\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif (this.payloadMessage.duplicate) first |= 0x08;\n\t\t\t\tfirst  = first |= (this.payloadMessage.qos << 1);\n\t\t\t\tif (this.payloadMessage.retained) first |= 0x01;\n\t\t\t\tdestinationNameLength = UTF8Length(this.payloadMessage.destinationName);\n\t\t\t\tremLength += destinationNameLength + 2;\t   \n\t\t\t\tvar payloadBytes = this.payloadMessage.payloadBytes;\n\t\t\t\tremLength += payloadBytes.byteLength;  \n\t\t\t\tif (payloadBytes instanceof ArrayBuffer)\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\telse if (!(payloadBytes instanceof Uint8Array))\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes.buffer);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t;\n\t\t}\n\n\t\t// Now we can allocate a buffer for the message\n\n\t\tvar mbi = encodeMBI(remLength);  // Convert the length to MQTT MBI format\n\t\tvar pos = mbi.length + 1;        // Offset of start of variable header\n\t\tvar buffer = new ArrayBuffer(remLength + pos);\n\t\tvar byteStream = new Uint8Array(buffer);    // view it as a sequence of bytes\n\n\t\t//Write the fixed header into the buffer\n\t\tbyteStream[0] = first;\n\t\tbyteStream.set(mbi,1);\n\n\t\t// If this is a PUBLISH then the variable header starts with a topic\n\t\tif (this.type == MESSAGE_TYPE.PUBLISH)\n\t\t\tpos = writeString(this.payloadMessage.destinationName, destinationNameLength, byteStream, pos);\n\t\t// If this is a CONNECT then the variable header contains the protocol name/version, flags and keepalive time\n\t\t\n\t\telse if (this.type == MESSAGE_TYPE.CONNECT) {\n\t\t\tbyteStream.set(MqttProtoIdentifier, pos);\n\t\t\tpos += MqttProtoIdentifier.length;\n\t\t\tvar connectFlags = 0;\n\t\t\tif (this.cleanSession) \n\t\t\t\tconnectFlags = 0x02;\n\t\t\tif (this.willMessage != undefined ) {\n\t\t\t\tconnectFlags |= 0x04;\n\t\t\t\tconnectFlags |= (this.willMessage.qos<<3);\n\t\t\t\tif (this.willMessage.retained) {\n\t\t\t\t\tconnectFlags |= 0x20;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.userName != undefined)\n\t\t\t\tconnectFlags |= 0x80;\n\t\t\tif (this.password != undefined)\n\t\t\t\tconnectFlags |= 0x40;\n\t\t\tbyteStream[pos++] = connectFlags; \n\t\t\tpos = writeUint16 (this.keepAliveInterval, byteStream, pos);\n\t\t}\n\n\t\t// Output the messageIdentifier - if there is one\n\t\tif (this.messageIdentifier != undefined)\n\t\t\tpos = writeUint16 (this.messageIdentifier, byteStream, pos);\n\n\t\tswitch(this.type) {\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tpos = writeString(this.clientId, UTF8Length(this.clientId), byteStream, pos); \n\t\t\t\tif (this.willMessage != undefined) {\n\t\t\t\t\tpos = writeString(this.willMessage.destinationName, UTF8Length(this.willMessage.destinationName), byteStream, pos);\n\t\t\t\t\tpos = writeUint16(willMessagePayloadBytes.byteLength, byteStream, pos);\n\t\t\t\t\tbyteStream.set(willMessagePayloadBytes, pos);\n\t\t\t\t\tpos += willMessagePayloadBytes.byteLength;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\tif (this.userName != undefined) \n\t\t\t\tpos = writeString(this.userName, UTF8Length(this.userName), byteStream, pos);\n\t\t\tif (this.password != undefined) \n\t\t\t\tpos = writeString(this.password, UTF8Length(this.password), byteStream, pos);\n\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\t\n\t\t\t\t// PUBLISH has a text or binary payload, if text do not add a 2 byte length field, just the UTF characters.\t\n\t\t\t\tbyteStream.set(payloadBytes, pos);\n\t\t\t\t\t\n\t\t\t\tbreak;\n\n//    \t    case MESSAGE_TYPE.PUBREC:\t\n//    \t    case MESSAGE_TYPE.PUBREL:\t\n//    \t    case MESSAGE_TYPE.PUBCOMP:\t\n//    \t    \tbreak;\n\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\t// SUBSCRIBE has a list of topic strings and request QoS\n\t\t\t\tfor (var i=0; i<this.topics.length; i++) {\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\t\tbyteStream[pos++] = this.requestedQos[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\t\n\t\t\t\t// UNSUBSCRIBE has a list of topic strings\n\t\t\t\tfor (var i=0; i<this.topics.length; i++)\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Do nothing.\n\t\t}\n\n\t\treturn buffer;\n\t}\t\n\n\tfunction decodeMessage(input,pos) {\n\t    var startingPos = pos;\n\t\tvar first = input[pos];\n\t\tvar type = first >> 4;\n\t\tvar messageInfo = first &= 0x0f;\n\t\tpos += 1;\n\t\t\n\n\t\t// Decode the remaining length (MBI format)\n\n\t\tvar digit;\n\t\tvar remLength = 0;\n\t\tvar multiplier = 1;\n\t\tdo {\n\t\t\tif (pos == input.length) {\n\t\t\t    return [null,startingPos];\n\t\t\t}\n\t\t\tdigit = input[pos++];\n\t\t\tremLength += ((digit & 0x7F) * multiplier);\n\t\t\tmultiplier *= 128;\n\t\t} while ((digit & 0x80) != 0);\n\t\t\n\t\tvar endPos = pos+remLength;\n\t\tif (endPos > input.length) {\n\t\t    return [null,startingPos];\n\t\t}\n\n\t\tvar wireMessage = new WireMessage(type);\n\t\tswitch(type) {\n\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\twireMessage.topicNameCompressionResponse = input[pos++];\n\t\t\t\twireMessage.returnCode = input[pos++];\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase MESSAGE_TYPE.PUBLISH:     \t    \t\n\t\t\t\tvar qos = (messageInfo >> 1) & 0x03;\n\t\t\t\t\t\t\t\n\t\t\t\tvar len = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\tvar topicName = parseUTF8(input, pos, len);\n\t\t\t\tpos += len;\n\t\t\t\t// If QoS 1 or 2 there will be a messageIdentifier\n\t\t\t\tif (qos > 0) {\n\t\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\t\tpos += 2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar message = new Messaging.Message(input.subarray(pos));\n\t\t\t\tif ((messageInfo & 0x01) == 0x01) \n\t\t\t\t\tmessage.retained = true;\n\t\t\t\tif ((messageInfo & 0x08) == 0x08)\n\t\t\t\t\tmessage.duplicate =  true;\n\t\t\t\tmessage.qos = qos;\n\t\t\t\tmessage.destinationName = topicName;\n\t\t\t\twireMessage.payloadMessage = message;\t\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase  MESSAGE_TYPE.PUBACK:\n\t\t\tcase  MESSAGE_TYPE.PUBREC:\t    \n\t\t\tcase  MESSAGE_TYPE.PUBREL:    \n\t\t\tcase  MESSAGE_TYPE.PUBCOMP:\n\t\t\tcase  MESSAGE_TYPE.UNSUBACK:    \t    \t\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase  MESSAGE_TYPE.SUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\twireMessage.grantedQos = input.subarray(pos);\t\n\t\t\t\tbreak;\n\t\t\n\t\t\tdefault:\n\t\t\t\t;\n\t\t}\n\t\t\t\t\n\t\treturn [wireMessage,endPos];\t\n\t}\n\n\tfunction writeUint16(input, buffer, offset) {\n\t\tbuffer[offset++] = input >> 8;      //MSB\n\t\tbuffer[offset++] = input % 256;     //LSB \n\t\treturn offset;\n\t}\t\n\n\tfunction writeString(input, utf8Length, buffer, offset) {\n\t\toffset = writeUint16(utf8Length, buffer, offset);\n\t\tstringToUTF8(input, buffer, offset);\n\t\treturn offset + utf8Length;\n\t}\t\n\n\tfunction readUint16(buffer, offset) {\n\t\treturn 256*buffer[offset] + buffer[offset+1];\n\t}\t\n\n\t/**\n\t * Encodes an MQTT Multi-Byte Integer\n\t * @private \n\t */\n\tfunction encodeMBI(number) {\n\t\tvar output = new Array(1);\n\t\tvar numBytes = 0;\n\n\t\tdo {\n\t\t\tvar digit = number % 128;\n\t\t\tnumber = number >> 7;\n\t\t\tif (number > 0) {\n\t\t\t\tdigit |= 0x80;\n\t\t\t}\n\t\t\toutput[numBytes++] = digit;\n\t\t} while ( (number > 0) && (numBytes<4) );\n\n\t\treturn output;\n\t}\n\n\t/**\n\t * Takes a String and calculates its length in bytes when encoded in UTF8.\n\t * @private\n\t */\n\tfunction UTF8Length(input) {\n\t\tvar output = 0;\n\t\tfor (var i = 0; i<input.length; i++) \n\t\t{\n\t\t\tvar charCode = input.charCodeAt(i);\n\t\t\t\tif (charCode > 0x7FF)\n\t\t\t\t   {\n\t\t\t\t\t  // Surrogate pair means its a 4 byte character\n\t\t\t\t\t  if (0xD800 <= charCode && charCode <= 0xDBFF)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t  i++;\n\t\t\t\t\t\t  output++;\n\t\t\t\t\t\t}\n\t\t\t\t   output +=3;\n\t\t\t\t   }\n\t\t\telse if (charCode > 0x7F)\n\t\t\t\toutput +=2;\n\t\t\telse\n\t\t\t\toutput++;\n\t\t} \n\t\treturn output;\n\t}\n\t\n\t/**\n\t * Takes a String and writes it into an array as UTF8 encoded bytes.\n\t * @private\n\t */\n\tfunction stringToUTF8(input, output, start) {\n\t\tvar pos = start;\n\t\tfor (var i = 0; i<input.length; i++) {\n\t\t\tvar charCode = input.charCodeAt(i);\n\t\t\t\n\t\t\t// Check for a surrogate pair.\n\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF) {\n\t\t\t\tlowCharCode = input.charCodeAt(++i);\n\t\t\t\tif (isNaN(lowCharCode)) {\n\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\n\t\t\t\t}\n\t\t\t\tcharCode = ((charCode - 0xD800)<<10) + (lowCharCode - 0xDC00) + 0x10000;\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (charCode <= 0x7F) {\n\t\t\t\toutput[pos++] = charCode;\n\t\t\t} else if (charCode <= 0x7FF) {\n\t\t\t\toutput[pos++] = charCode>>6  & 0x1F | 0xC0;\n\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t} else if (charCode <= 0xFFFF) {    \t\t\t\t    \n\t\t\t\toutput[pos++] = charCode>>12 & 0x0F | 0xE0;\n\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;   \n\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;   \n\t\t\t} else {\n\t\t\t\toutput[pos++] = charCode>>18 & 0x07 | 0xF0;\n\t\t\t\toutput[pos++] = charCode>>12 & 0x3F | 0x80;\n\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t};\n\t\t} \n\t\treturn output;\n\t}\n\t\n\tfunction parseUTF8(input, offset, length) {\n\t\tvar output = \"\";\n\t\tvar utf16;\n\t\tvar pos = offset;\n\n\t\twhile (pos < offset+length)\n\t\t{\n\t\t\tvar byte1 = input[pos++];\n\t\t\tif (byte1 < 128)\n\t\t\t\tutf16 = byte1;\n\t\t\telse \n\t\t\t{\n\t\t\t\tvar byte2 = input[pos++]-128;\n\t\t\t\tif (byte2 < 0) \n\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16),\"\"]));\n\t\t\t\tif (byte1 < 0xE0)             // 2 byte character\n\t\t\t\t\tutf16 = 64*(byte1-0xC0) + byte2;\n\t\t\t\telse \n\t\t\t\t{ \n\t\t\t\t\tvar byte3 = input[pos++]-128;\n\t\t\t\t\tif (byte3 < 0) \n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\n\t\t\t\t\tif (byte1 < 0xF0)        // 3 byte character\n\t\t\t\t\t\tutf16 = 4096*(byte1-0xE0) + 64*byte2 + byte3;\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t   var byte4 = input[pos++]-128;\n\t\t\t\t\t\t\t\t   if (byte4 < 0) \n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t\t\t   if (byte1 < 0xF8)        // 4 byte character \n\t\t\t\t\t\t\t\t\t\t   utf16 = 262144*(byte1-0xF0) + 4096*byte2 + 64*byte3 + byte4;\n\t\t\t\t\t   else                     // longer encodings are not supported  \n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}  \n\n\t\t\t\tif (utf16 > 0xFFFF)   // 4 byte character - express as a surrogate pair\n\t\t\t\t  {\n\t\t\t\t\t utf16 -= 0x10000;\n\t\t\t\t\t output += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character\n\t\t\t\t\t utf16 = 0xDC00 + (utf16 & 0x3FF);  // trail character\n\t\t\t\t  }\n\t\t\toutput += String.fromCharCode(utf16);\n\t\t}\n\t\treturn output;\n\t}\n\t\n\t/** \n\t * Repeat keepalive requests, monitor responses.\n\t * @ignore\n\t */\n\tvar Pinger = function(client, window, keepAliveInterval) { \n\t\tthis._client = client;        \t\n\t\tthis._window = window;\n\t\tthis._keepAliveInterval = keepAliveInterval*1000;     \t\n\t\tthis.isReset = false;\n\t\t\n\t\tvar pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode(); \n\t\t\n\t\tvar doTimeout = function (pinger) {\n\t\t\treturn function () {\n\t\t\t\treturn doPing.apply(pinger);\n\t\t\t};\n\t\t};\n\t\t\n\t\t/** @ignore */\n\t\tvar doPing = function() { \n\t\t\tif (!this.isReset) {\n\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"Timed out\");\n\t\t\t\tthis._client._disconnected( ERROR.PING_TIMEOUT.code , format(ERROR.PING_TIMEOUT));\n\t\t\t} else {\n\t\t\t\tthis.isReset = false;\n\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"send PINGREQ\");\n\t\t\t\tthis._client.socket.send(pingReq); \n\t\t\t\tthis.timeout = this._window.setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t}\n\t\t}\n\n\t\tthis.reset = function() {\n\t\t\tthis.isReset = true;\n\t\t\tthis._window.clearTimeout(this.timeout);\n\t\t\tif (this._keepAliveInterval > 0)\n\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t}\n\n\t\tthis.cancel = function() {\n\t\t\tthis._window.clearTimeout(this.timeout);\n\t\t}\n\t }; \n\n\t/**\n\t * Monitor request completion.\n\t * @ignore\n\t */\n\tvar Timeout = function(client, window, timeoutSeconds, action, args) {\n\t\tthis._window = window;\n\t\tif (!timeoutSeconds)\n\t\t\ttimeoutSeconds = 30;\n\t\t\n\t\tvar doTimeout = function (action, client, args) {\n\t\t\treturn function () {\n\t\t\t\treturn action.apply(client, args);\n\t\t\t};\n\t\t};\n\t\tthis.timeout = setTimeout(doTimeout(action, client, args), timeoutSeconds * 1000);\n\t\t\n\t\tthis.cancel = function() {\n\t\t\tthis._window.clearTimeout(this.timeout);\n\t\t}\n\t}; \n\t\n\t/*\n\t * Internal implementation of the Websockets MQTT V3.1 client.\n\t * \n\t * @name Messaging.ClientImpl @constructor \n\t * @param {String} host the DNS nameof the webSocket host. \n\t * @param {Number} port the port number for that host.\n\t * @param {String} clientId the MQ client identifier.\n\t */\n\tvar ClientImpl = function (uri, host, port, path, clientId) {\n\t\t// Check dependencies are satisfied in this browser.\n\t\tif (!(\"WebSocket\" in global && global[\"WebSocket\"] !== null)) {\n\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"WebSocket\"]));\n\t\t}\n\t\tif (!(\"localStorage\" in global && global[\"localStorage\"] !== null)) {\n\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"localStorage\"]));\n\t\t}\n\t\tif (!(\"ArrayBuffer\" in global && global[\"ArrayBuffer\"] !== null)) {\n\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"ArrayBuffer\"]));\n\t\t}\n\t\tthis._trace(\"Messaging.Client\", uri, host, port, path, clientId);\n\n\t\tthis.host = host;\n\t\tthis.port = port;\n\t\tthis.path = path;\n\t\tthis.uri = uri;\n\t\tthis.clientId = clientId;\n\n\t\t// Local storagekeys are qualified with the following string.\n\t\t// The conditional inclusion of path in the key is for backward\n\t\t// compatibility to when the path was not configurable and assumed to\n\t\t// be /mqtt\n\t\tthis._localKey=host+\":\"+port+(path!=\"/mqtt\"?\":\"+path:\"\")+\":\"+clientId+\":\";\n\n\t\t// Create private instance-only message queue\n\t\t// Internal queue of messages to be sent, in sending order. \n\t\tthis._msg_queue = [];\n\n\t\t// Messages we have sent and are expecting a response for, indexed by their respective message ids. \n\t\tthis._sentMessages = {};\n\n\t\t// Messages we have received and acknowleged and are expecting a confirm message for\n\t\t// indexed by their respective message ids. \n\t\tthis._receivedMessages = {};\n\n\t\t// Internal list of callbacks to be executed when messages\n\t\t// have been successfully sent over web socket, e.g. disconnect\n\t\t// when it doesn't have to wait for ACK, just message is dispatched.\n\t\tthis._notify_msg_sent = {};\n\n\t\t// Unique identifier for SEND messages, incrementing\n\t\t// counter as messages are sent.\n\t\tthis._message_identifier = 1;\n\t\t\n\t\t// Used to determine the transmission sequence of stored sent messages.\n\t\tthis._sequence = 0;\n\t\t\n\n\t\t// Load the local state, if any, from the saved version, only restore state relevant to this client.   \t\n\t\tfor(key in localStorage)\n\t\t\tif (   key.indexOf(\"Sent:\"+this._localKey) == 0  \t\t    \n\t\t\t\t|| key.indexOf(\"Received:\"+this._localKey) == 0)\n\t\t\tthis.restore(key);\n\t};\n\n\t// Messaging Client public instance members. \n\tClientImpl.prototype.host;\n\tClientImpl.prototype.port;\n\tClientImpl.prototype.path;\n\tClientImpl.prototype.uri;\n\tClientImpl.prototype.clientId;\n\n\t// Messaging Client private instance members.\n\tClientImpl.prototype.socket;\n\t/* true once we have received an acknowledgement to a CONNECT packet. */\n\tClientImpl.prototype.connected = false;\n\t/* The largest message identifier allowed, may not be larger than 2**16 but \n\t * if set smaller reduces the maximum number of outbound messages allowed.\n\t */ \n\tClientImpl.prototype.maxMessageIdentifier = 65536;\n\tClientImpl.prototype.connectOptions;\n\tClientImpl.prototype.hostIndex;\n\tClientImpl.prototype.onConnectionLost;\n\tClientImpl.prototype.onMessageDelivered;\n\tClientImpl.prototype.onMessageArrived;\n\tClientImpl.prototype._msg_queue = null;\n\tClientImpl.prototype._connectTimeout;\n\t/* The sendPinger monitors how long we allow before we send data to prove to the server that we are alive. */\n\tClientImpl.prototype.sendPinger = null;\n\t/* The receivePinger monitors how long we allow before we require evidence that the server is alive. */\n\tClientImpl.prototype.receivePinger = null;\n\t\n\tClientImpl.prototype.receiveBuffer = null;\n\t\n\tClientImpl.prototype._traceBuffer = null;\n\tClientImpl.prototype._MAX_TRACE_ENTRIES = 100;\n\n\tClientImpl.prototype.connect = function (connectOptions) {\n\t\tvar connectOptionsMasked = this._traceMask(connectOptions, \"password\"); \n\t\tthis._trace(\"Client.connect\", connectOptionsMasked, this.socket, this.connected);\n\t\t\n\t\tif (this.connected) \n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\t\tif (this.socket)\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\t\t\n\t\tthis.connectOptions = connectOptions;\n\t\t\n\t\tif (connectOptions.uris) {\n\t\t\tthis.hostIndex = 0;\n\t\t\tthis._doConnect(connectOptions.uris[0]);  \n\t\t} else {\n\t\t\tthis._doConnect(this.uri);  \t\t\n\t\t}\n\t\t\n\t};\n\n\tClientImpl.prototype.subscribe = function (filter, subscribeOptions) {\n\t\tthis._trace(\"Client.subscribe\", filter, subscribeOptions);\n\t\t\t  \n\t\tif (!this.connected)\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\n\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);\n\t\twireMessage.topics=[filter];\n\t\tif (subscribeOptions.qos != undefined)\n\t\t\twireMessage.requestedQos = [subscribeOptions.qos];\n\t\telse \n\t\t\twireMessage.requestedQos = [0];\n\t\t\n\t\tif (subscribeOptions.onSuccess) {\n\t\t\twireMessage.callback = function() {subscribeOptions.onSuccess({invocationContext:subscribeOptions.invocationContext});};\n\t\t}\n\t\tif (subscribeOptions.timeout) {\n\t\t\twireMessage.timeOut = new Timeout(this, window, subscribeOptions.timeout, subscribeOptions.onFailure\n\t\t\t\t\t, [{invocationContext:subscribeOptions.invocationContext, \n\t\t\t\t\t\terrorCode:ERROR.SUBSCRIBE_TIMEOUT.code, \n\t\t\t\t\t\terrorMessage:format(ERROR.SUBSCRIBE_TIMEOUT)}]);\n\t\t}\n\t\t\n\t\t// All subscriptions return a SUBACK. \n\t\tthis._requires_ack(wireMessage);\n\t\tthis._schedule_message(wireMessage);\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype.unsubscribe = function(filter, unsubscribeOptions) {  \n\t\tthis._trace(\"Client.unsubscribe\", filter, unsubscribeOptions);\n\t\t\n\t\tif (!this.connected)\n\t\t   throw new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\n\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);\n\t\twireMessage.topics = [filter];\n\t\t\n\t\tif (unsubscribeOptions.onSuccess) {\n\t\t\twireMessage.callback = function() {unsubscribeOptions.onSuccess({invocationContext:unsubscribeOptions.invocationContext});};\n\t\t}\n\t\tif (unsubscribeOptions.timeout) {\n\t\t\twireMessage.timeOut = new Timeout(this, window, unsubscribeOptions.timeout, unsubscribeOptions.onFailure\n\t\t\t\t\t, [{invocationContext:unsubscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.UNSUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.UNSUBSCRIBE_TIMEOUT)}]);\n\t\t}\n\t \n\t\t// All unsubscribes return a SUBACK.         \n\t\tthis._requires_ack(wireMessage);\n\t\tthis._schedule_message(wireMessage);\n\t};\n\t \n\tClientImpl.prototype.send = function (message) {\n\t\tthis._trace(\"Client.send\", message);\n\n\t\tif (!this.connected)\n\t\t   throw new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\n\t\twireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);\n\t\twireMessage.payloadMessage = message;\n\t\t\n\t\tif (message.qos > 0)\n\t\t\tthis._requires_ack(wireMessage);\n\t\telse if (this.onMessageDelivered)\n\t\t\tthis._notify_msg_sent[wireMessage] = this.onMessageDelivered(wireMessage.payloadMessage);\n\t\tthis._schedule_message(wireMessage);\n\t};\n\t\n\tClientImpl.prototype.disconnect = function () {\n\t\tthis._trace(\"Client.disconnect\");\n\n\t\tif (!this.socket)\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connecting or connected\"]));\n\t\t\n\t\twireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT);\n\n\t\t// Run the disconnected call back as soon as the message has been sent,\n\t\t// in case of a failure later on in the disconnect processing.\n\t\t// as a consequence, the _disconected call back may be run several times.\n\t\tthis._notify_msg_sent[wireMessage] = scope(this._disconnected, this);\n\n\t\tthis._schedule_message(wireMessage);\n\t};\n\t\n\tClientImpl.prototype.getTraceLog = function () {\n\t\tif ( this._traceBuffer !== null ) {\n\t\t\tthis._trace(\"Client.getTraceLog\", new Date());\n\t\t\tthis._trace(\"Client.getTraceLog in flight messages\", this._sentMessages.length);\n\t\t\tfor (key in this._sentMessages)\n\t\t\t\tthis._trace(\"_sentMessages \",key, this._sentMessages[key]);\n\t\t\tfor (key in this._receivedMessages)\n\t\t\t\tthis._trace(\"_receivedMessages \",key, this._receivedMessages[key]);\n\t\t\t\n\t\t\treturn this._traceBuffer;\n\t\t}\n\t};\n\t\n\tClientImpl.prototype.startTrace = function () {\n\t\tif ( this._traceBuffer === null ) {\n\t\t\tthis._traceBuffer = [];\n\t\t}\n\t\tthis._trace(\"Client.startTrace\", new Date(), version);\n\t};\n\t\n\tClientImpl.prototype.stopTrace = function () {\n\t\tdelete this._traceBuffer;\n\t};\n\n\tClientImpl.prototype._doConnect = function (wsurl) { \t        \n\t\t// When the socket is open, this client will send the CONNECT WireMessage using the saved parameters. \n\t\tif (this.connectOptions.useSSL) {\n\t\t    var uriParts = wsurl.split(\":\");\n\t\t    uriParts[0] = \"wss\";\n\t\t    wsurl = uriParts.join(\":\");\n\t\t}\n\t\tthis.connected = false;\n\t\tthis.socket = new WebSocket(wsurl, \"mqttv3.1\");\n\t\tthis.socket.binaryType = 'arraybuffer';\n\t\t\n\t\tthis.socket.onopen = scope(this._on_socket_open, this);\n\t\tthis.socket.onmessage = scope(this._on_socket_message, this);\n\t\tthis.socket.onerror = scope(this._on_socket_error, this);\n\t\tthis.socket.onclose = scope(this._on_socket_close, this);\n\t\t\n\t\tthis.sendPinger = new Pinger(this, window, this.connectOptions.keepAliveInterval);\n\t\tthis.receivePinger = new Pinger(this, window, this.connectOptions.keepAliveInterval);\n\t\t\n\t\tthis._connectTimeout = new Timeout(this, window, this.connectOptions.timeout, this._disconnected,  [ERROR.CONNECT_TIMEOUT.code, format(ERROR.CONNECT_TIMEOUT)]);\n\t};\n\n\t\n\t// Schedule a new message to be sent over the WebSockets\n\t// connection. CONNECT messages cause WebSocket connection\n\t// to be started. All other messages are queued internally\n\t// until this has happened. When WS connection starts, process\n\t// all outstanding messages. \n\tClientImpl.prototype._schedule_message = function (message) {\n\t\tthis._msg_queue.push(message);\n\t\t// Process outstanding messages in the queue if we have an  open socket, and have received CONNACK. \n\t\tif (this.connected) {\n\t\t\tthis._process_queue();\n\t\t}\n\t};\n\n\tClientImpl.prototype.store = function(prefix, wireMessage) {\n\t\tstoredMessage = {type:wireMessage.type, messageIdentifier:wireMessage.messageIdentifier, version:1};\n\t\t\n\t\tswitch(wireMessage.type) {\n\t\t  case MESSAGE_TYPE.PUBLISH:\n\t\t\t  if(wireMessage.pubRecReceived)\n\t\t\t\t  storedMessage.pubRecReceived = true;\n\t\t\t  \n\t\t\t  // Convert the payload to a hex string.\n\t\t\t  storedMessage.payloadMessage = {};\n\t\t\t  var hex = \"\";\n\t\t\t  var messageBytes = wireMessage.payloadMessage.payloadBytes;\n\t\t\t  for (var i=0; i<messageBytes.length; i++) {\n\t\t\t\tif (messageBytes[i] <= 0xF)\n\t\t\t\t  hex = hex+\"0\"+messageBytes[i].toString(16);\n\t\t\t\telse \n\t\t\t\t  hex = hex+messageBytes[i].toString(16);\n\t\t\t  }\n\t\t\t  storedMessage.payloadMessage.payloadHex = hex;\n\t\t\t  \n\t\t\t  storedMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;\n\t\t\t  storedMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;\n\t\t\t  if (wireMessage.payloadMessage.duplicate) \n\t\t\t\t  storedMessage.payloadMessage.duplicate = true;\n\t\t\t  if (wireMessage.payloadMessage.retained) \n\t\t\t\t  storedMessage.payloadMessage.retained = true;\t   \n\t\t\t  \n\t\t\t  // Add a sequence number to sent messages.\n\t\t\t  if ( prefix.indexOf(\"Sent:\") == 0 ) {\n\t\t\t\t  if ( wireMessage.sequence === undefined )\n\t\t\t\t\t  wireMessage.sequence = ++this._sequence;\n\t\t\t\t  storedMessage.sequence = wireMessage.sequence;\n\t\t\t  }\n\t\t\t  break;    \n\t\t\t  \n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [key, storedMessage]));\n\t\t}\n\t\tlocalStorage.setItem(prefix+this._localKey+wireMessage.messageIdentifier, JSON.stringify(storedMessage));\n\t};\n\t\n\tClientImpl.prototype.restore = function(key) {    \t\n\t\tvar value = localStorage.getItem(key);\n\t\tvar storedMessage = JSON.parse(value);\n\t\t\n\t\tvar wireMessage = new WireMessage(storedMessage.type, storedMessage);\n\t\t\n\t\tswitch(storedMessage.type) {\n\t\t  case MESSAGE_TYPE.PUBLISH:\n\t\t\t  // Replace the payload message with a Message object.\n\t\t\t  var hex = storedMessage.payloadMessage.payloadHex;\n\t\t\t  var buffer = new ArrayBuffer((hex.length)/2);\n\t\t\t  var byteStream = new Uint8Array(buffer); \n\t\t\t  var i = 0;\n\t\t\t  while (hex.length >= 2) { \n\t\t\t\t  var x = parseInt(hex.substring(0, 2), 16);\n\t\t\t\t  hex = hex.substring(2, hex.length);\n\t\t\t\t  byteStream[i++] = x;\n\t\t\t  }\n\t\t\t  var payloadMessage = new Messaging.Message(byteStream);\n\t\t\t  \n\t\t\t  payloadMessage.qos = storedMessage.payloadMessage.qos;\n\t\t\t  payloadMessage.destinationName = storedMessage.payloadMessage.destinationName;\n\t\t\t  if (storedMessage.payloadMessage.duplicate) \n\t\t\t\t  payloadMessage.duplicate = true;\n\t\t\t  if (storedMessage.payloadMessage.retained) \n\t\t\t\t  payloadMessage.retained = true;\t \n\t\t\t  wireMessage.payloadMessage = payloadMessage;\n\t\t\t  \n\t\t\t  break;    \n\t\t\t  \n\t\t\tdefault:\n\t\t\t  throw Error(format(ERROR.INVALID_STORED_DATA, [key, value]));\n\t\t}\n\t\t\t\t\t\t\t\n\t\tif (key.indexOf(\"Sent:\"+this._localKey) == 0) {      \n\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;    \t\t    \n\t\t} else if (key.indexOf(\"Received:\"+this._localKey) == 0) {\n\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t}\n\t};\n\t\n\tClientImpl.prototype._process_queue = function () {\n\t\tvar message = null;\n\t\t// Process messages in order they were added\n\t\tvar fifo = this._msg_queue.reverse();\n\n\t\t// Send all queued messages down socket connection\n\t\twhile ((message = fifo.pop())) {\n\t\t\tthis._socket_send(message);\n\t\t\t// Notify listeners that message was successfully sent\n\t\t\tif (this._notify_msg_sent[message]) {\n\t\t\t\tthis._notify_msg_sent[message]();\n\t\t\t\tdelete this._notify_msg_sent[message];\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Expect an ACK response for this message. Add message to the set of in progress\n\t * messages and set an unused identifier in this message.\n\t * @ignore\n\t */\n\tClientImpl.prototype._requires_ack = function (wireMessage) {\n\t\tvar messageCount = Object.keys(this._sentMessages).length;\n\t\tif (messageCount > this.maxMessageIdentifier)\n\t\t\tthrow Error (\"Too many messages:\"+messageCount);\n\n\t\twhile(this._sentMessages[this._message_identifier] !== undefined) {\n\t\t\tthis._message_identifier++;\n\t\t}\n\t\twireMessage.messageIdentifier = this._message_identifier;\n\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\tif (wireMessage.type === MESSAGE_TYPE.PUBLISH) {\n\t\t\tthis.store(\"Sent:\", wireMessage);\n\t\t}\n\t\tif (this._message_identifier === this.maxMessageIdentifier) {\n\t\t\tthis._message_identifier = 1;\n\t\t}\n\t};\n\n\t/** \n\t * Called when the underlying websocket has been opened.\n\t * @ignore\n\t */\n\tClientImpl.prototype._on_socket_open = function () {        \n\t\t// Create the CONNECT message object.\n\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.CONNECT, this.connectOptions); \n\t\twireMessage.clientId = this.clientId;\n\t\tthis._socket_send(wireMessage);\n\t};\n\n\t/** \n\t * Called when the underlying websocket has received a complete packet.\n\t * @ignore\n\t */\n\tClientImpl.prototype._on_socket_message = function (event) {\n\t\tthis._trace(\"Client._on_socket_message\", event.data);\n\t\t// Reset the receive ping timer, we now have evidence the server is alive.\n\t\tthis.receivePinger.reset();\n\t\tvar messages = this._deframeMessages(event.data);\n\t\tfor (var i = 0; i < messages.length; i+=1) {\n\t\t    this._handleMessage(messages[i]);\n\t\t}\n\t}\n\t\n\tClientImpl.prototype._deframeMessages = function(data) {\n\t\tvar byteArray = new Uint8Array(data);\n\t    if (this.receiveBuffer) {\n\t        var newData = new Uint8Array(this.receiveBuffer.length+byteArray.length);\n\t        newData.set(this.receiveBuffer);\n\t        newData.set(byteArray,this.receiveBuffer.length);\n\t        byteArray = newData;\n\t        delete this.receiveBuffer;\n\t    }\n\t\ttry {\n\t\t    var offset = 0;\n\t\t    var messages = [];\n\t\t    while(offset < byteArray.length) {\n\t\t        var result = decodeMessage(byteArray,offset);\n\t\t        var wireMessage = result[0];\n\t\t        offset = result[1];\n\t\t        if (wireMessage !== null) {\n\t\t            messages.push(wireMessage);\n\t\t        } else {\n\t\t            break;\n\t\t        }\n\t\t    }\n\t\t    if (offset < byteArray.length) {\n\t\t    \tthis.receiveBuffer = byteArray.subarray(offset);\n\t\t    }\n\t\t} catch (error) {\n\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message]));\n\t\t\treturn;\n\t\t}\n\t\treturn messages;\n\t}\n\t\n\tClientImpl.prototype._handleMessage = function(wireMessage) {\n\t\t\n\t\tthis._trace(\"Client._handleMessage\", wireMessage);\n\n\t\ttry {\n\t\t\tswitch(wireMessage.type) {\n\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\t\n\t\t\t\t// If we have started using clean session then clear up the local state.\n\t\t\t\tif (this.connectOptions.cleanSession) {\n\t\t\t\t\tfor (key in this._sentMessages) {\t    \t\t\n\t\t\t\t\t\tvar sentMessage = this._sentMessages[key];\n\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+sentMessage.messageIdentifier);\n\t\t\t\t\t}\n\t\t\t\t\tthis._sentMessages = {};\n\n\t\t\t\t\tfor (key in this._receivedMessages) {\n\t\t\t\t\t\tvar receivedMessage = this._receivedMessages[key];\n\t\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+receivedMessage.messageIdentifier);\n\t\t\t\t\t}\n\t\t\t\t\tthis._receivedMessages = {};\n\t\t\t\t}\n\t\t\t\t// Client connected and ready for business.\n\t\t\t\tif (wireMessage.returnCode === 0) {\n\t\t\t\t\tthis.connected = true;\n\t\t\t\t\t// Jump to the end of the list of uris and stop looking for a good host.\n\t\t\t\t\tif (this.connectOptions.uris)\n\t\t\t\t\t\tthis.hostIndex = this.connectOptions.uris.length;\n\t\t\t\t} else {\n\t\t\t\t\tthis._disconnected(ERROR.CONNACK_RETURNCODE.code , format(ERROR.CONNACK_RETURNCODE, [wireMessage.returnCode, CONNACK_RC[wireMessage.returnCode]]));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Resend messages.\n\t\t\t\tvar sequencedMessages = new Array();\n\t\t\t\tfor (var msgId in this._sentMessages) {\n\t\t\t\t\tif (this._sentMessages.hasOwnProperty(msgId))\n\t\t\t\t\t\tsequencedMessages.push(this._sentMessages[msgId]);\n\t\t\t\t}\n\t\t  \n\t\t\t\t// Sort sentMessages into the original sent order.\n\t\t\t\tvar sequencedMessages = sequencedMessages.sort(function(a,b) {return a.sequence - b.sequence;} );\n\t\t\t\tfor (var i=0, len=sequencedMessages.length; i<len; i++) {\n\t\t\t\t\tvar sentMessage = sequencedMessages[i];\n\t\t\t\t\tif (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {\n\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:sentMessage.messageIdentifier});\n\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._schedule_message(sentMessage);\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Execute the connectOptions.onSuccess callback if there is one.\n\t\t\t\tif (this.connectOptions.onSuccess) {\n\t\t\t\t\tthis.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});\n\t\t\t\t}\n\n\t\t\t\t// Process all queued messages now that the connection is established. \n\t\t\t\tthis._process_queue();\n\t\t\t\tbreak;\n\t\t\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tthis._receivePublish(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBACK:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t // If this is a re flow of a PUBACK after we have restarted receivedMessage will not exist.\n\t\t\t\tif (sentMessage) {\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase MESSAGE_TYPE.PUBREC:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t// If this is a re flow of a PUBREC after we have restarted receivedMessage will not exist.\n\t\t\t\tif (sentMessage) {\n\t\t\t\t\tsentMessage.pubRecReceived = true;\n\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\tthis.store(\"Sent:\", sentMessage);\n\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\n\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\tvar receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t// If this is a re flow of a PUBREL after we have restarted receivedMessage will not exist.\n\t\t\t\tif (receivedMessage) {\n\t\t\t\t\tthis._receiveMessage(receivedMessage);\n\t\t\t\t\tdelete this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t}\n\t\t\t\t// Always flow PubComp, we may have previously flowed PubComp but the server lost it and restarted.\n\t\t\t\tpubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubCompMessage);                    \n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBCOMP: \n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase MESSAGE_TYPE.SUBACK:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\tif (sentMessage) {\n\t\t\t\t\tif(sentMessage.timeOut)\n\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\tif (sentMessage.callback) {\n\t\t\t\t\t\tsentMessage.callback();\n\t\t\t\t\t}\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase MESSAGE_TYPE.UNSUBACK:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\tif (sentMessage) { \n\t\t\t\t\tif (sentMessage.timeOut)\n\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\tif (sentMessage.callback) {\n\t\t\t\t\t\tsentMessage.callback();\n\t\t\t\t\t}\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase MESSAGE_TYPE.PINGRESP:\n\t\t\t\t/* The sendPinger or receivePinger may have sent a ping, the receivePinger has already been reset. */\n\t\t\t\tthis.sendPinger.reset();\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\t// Clients do not expect to receive disconnect packets.\n\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message]));\n\t\t\treturn;\n\t\t}\n\t};\n\t\n\t/** @ignore */\n\tClientImpl.prototype._on_socket_error = function (error) {\n\t\tthis._disconnected(ERROR.SOCKET_ERROR.code , format(ERROR.SOCKET_ERROR, [error.data]));\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._on_socket_close = function () {\n\t\tthis._disconnected(ERROR.SOCKET_CLOSE.code , format(ERROR.SOCKET_CLOSE));\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._socket_send = function (wireMessage) {\n\t\t\n\t\tif (wireMessage.type == 1) {\n\t\t\tvar wireMessageMasked = this._traceMask(wireMessage, \"password\"); \n\t\t\tthis._trace(\"Client._socket_send\", wireMessageMasked);\n\t\t}\n\t\telse this._trace(\"Client._socket_send\", wireMessage);\n\t\t\n\t\tthis.socket.send(wireMessage.encode());\n\t\t/* We have proved to the server we are alive. */\n\t\tthis.sendPinger.reset();\n\t};\n\t\n\t/** @ignore */\n\tClientImpl.prototype._receivePublish = function (wireMessage) {\n\t\tswitch(wireMessage.payloadMessage.qos) {\n\t\t\tcase \"undefined\":\n\t\t\tcase 0:\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tvar pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubAckMessage);\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t\tthis.store(\"Received:\", wireMessage);\n\t\t\t\tvar pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubRecMessage);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(\"Invaild qos=\"+wireMmessage.payloadMessage.qos);\n\t\t};\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._receiveMessage = function (wireMessage) {\n\t\tif (this.onMessageArrived) {\n\t\t\tthis.onMessageArrived(wireMessage.payloadMessage);\n\t\t}\n\t};\n\n\t/**\n\t * Client has disconnected either at its own request or because the server\n\t * or network disconnected it. Remove all non-durable state.\n\t * @param {errorCode} [number] the error number.\n\t * @param {errorText} [string] the error text.\n\t * @ignore\n\t */\n\tClientImpl.prototype._disconnected = function (errorCode, errorText) {\n\t\tthis._trace(\"Client._disconnected\", errorCode, errorText);\n\t\t\n\t\tthis.sendPinger.cancel();\n\t\tthis.receivePinger.cancel();\n\t\tif (this._connectTimeout)\n\t\t\tthis._connectTimeout.cancel();\n\t\t// Clear message buffers.\n\t\tthis._msg_queue = [];\n\t\tthis._notify_msg_sent = {};\n\t   \n\t\tif (this.socket) {\n\t\t\t// Cancel all socket callbacks so that they cannot be driven again by this socket.\n\t\t\tthis.socket.onopen = null;\n\t\t\tthis.socket.onmessage = null;\n\t\t\tthis.socket.onerror = null;\n\t\t\tthis.socket.onclose = null;\n\t\t\tif (this.socket.readyState === 1)\n\t\t\t\tthis.socket.close();\n\t\t\tdelete this.socket;           \n\t\t}\n\t\t\n\t\tif (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length-1) {\n\t\t\t// Try the next host.\n\t\t\tthis.hostIndex++;\n\t\t\tthis._doConnect(this.connectOptions.uris[this.hostIndex]);\n\t\t\n\t\t} else {\n\t\t\n\t\t\tif (errorCode === undefined) {\n\t\t\t\terrorCode = ERROR.OK.code;\n\t\t\t\terrorText = format(ERROR.OK);\n\t\t\t}\n\t\t\t\n\t\t\t// Run any application callbacks last as they may attempt to reconnect and hence create a new socket.\n\t\t\tif (this.connected) {\n\t\t\t\tthis.connected = false;\n\t\t\t\t// Execute the connectionLostCallback if there is one, and we were connected.       \n\t\t\t\tif (this.onConnectionLost)\n\t\t\t\t\tthis.onConnectionLost({errorCode:errorCode, errorMessage:errorText});      \t\n\t\t\t} else {\n\t\t\t\t// Otherwise we never had a connection, so indicate that the connect has failed.\n\t\t\t\tif(this.connectOptions.onFailure)\n\t\t\t\t\tthis.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext, errorCode:errorCode, errorMessage:errorText});\n\t\t\t}\n\t\t}\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._trace = function () {\n\t\tif ( this._traceBuffer !== null ) {  \n\t\t\tfor (var i = 0, max = arguments.length; i < max; i++) {\n\t\t\t\tif ( this._traceBuffer.length == this._MAX_TRACE_ENTRIES ) {    \n\t\t\t\t\tthis._traceBuffer.shift();              \n\t\t\t\t}\n\t\t\t\tif (i === 0) this._traceBuffer.push(arguments[i]);\n\t\t\t\telse if (typeof arguments[i] === \"undefined\" ) this._traceBuffer.push(arguments[i]);\n\t\t\t\telse this._traceBuffer.push(\"  \"+JSON.stringify(arguments[i]));\n\t\t   };\n\t\t};\n\t};\n\t\n\t/** @ignore */\n\tClientImpl.prototype._traceMask = function (traceObject, masked) {\n\t\tvar traceObjectMasked = {};\n\t\tfor (var attr in traceObject) {\n\t\t\tif (traceObject.hasOwnProperty(attr)) {\n\t\t\t\tif (attr == masked) \n\t\t\t\t\ttraceObjectMasked[attr] = \"******\";\n\t\t\t\telse\n\t\t\t\t\ttraceObjectMasked[attr] = traceObject[attr];\n\t\t\t} \n\t\t}\n\t\treturn traceObjectMasked;\n\t};\n\n\t// ------------------------------------------------------------------------\n\t// Public Programming interface.\n\t// ------------------------------------------------------------------------\n\t\n\t/** \n\t * The JavaScript application communicates to the server using a {@link Messaging.Client} object. \n\t * <p>\n\t * Most applications will create just one Client object and then call its connect() method,\n\t * however applications can create more than one Client object if they wish. \n\t * In this case the combination of host, port and clientId attributes must be different for each Client object.\n\t * <p>\n\t * The send, subscribe and unsubscribe methods are implemented as asynchronous JavaScript methods \n\t * (even though the underlying protocol exchange might be synchronous in nature). \n\t * This means they signal their completion by calling back to the application, \n\t * via Success or Failure callback functions provided by the application on the method in question. \n\t * Such callbacks are called at most once per method invocation and do not persist beyond the lifetime \n\t * of the script that made the invocation.\n\t * <p>\n\t * In contrast there are some callback functions, most notably <i>onMessageArrived</i>, \n\t * that are defined on the {@link Messaging.Client} object.  \n\t * These may get called multiple times, and aren't directly related to specific method invocations made by the client. \n\t *\n\t * @name Messaging.Client    \n\t * \n\t * @constructor\n\t *  \n\t * @param {string} host - the address of the messaging server, as a fully qualified WebSocket URI, as a DNS name or dotted decimal IP address.\n\t * @param {number} port - the port number to connect to - only required if host is not a URI\n\t * @param {string} path - the path on the host to connect to - only used if host is not a URI. Default: '/mqtt'.\n\t * @param {string} clientId - the Messaging client identifier, between 1 and 23 characters in length.\n\t * \n\t * @property {string} host - <i>read only</i> the server's DNS hostname or dotted decimal IP address.\n\t * @property {number} port - <i>read only</i> the server's port.\n\t * @property {string} path - <i>read only</i> the server's path.\n\t * @property {string} clientId - <i>read only</i> used when connecting to the server.\n\t * @property {function} onConnectionLost - called when a connection has been lost. \n\t *                            after a connect() method has succeeded.\n\t *                            Establish the call back used when a connection has been lost. The connection may be\n\t *                            lost because the client initiates a disconnect or because the server or network \n\t *                            cause the client to be disconnected. The disconnect call back may be called without \n\t *                            the connectionComplete call back being invoked if, for example the client fails to \n\t *                            connect.\n\t *                            A single response object parameter is passed to the onConnectionLost callback containing the following fields:\n\t *                            <ol>   \n\t *                            <li>errorCode\n\t *                            <li>errorMessage       \n\t *                            </ol>\n\t * @property {function} onMessageDelivered called when a message has been delivered. \n\t *                            All processing that this Client will ever do has been completed. So, for example,\n\t *                            in the case of a Qos=2 message sent by this client, the PubComp flow has been received from the server\n\t *                            and the message has been removed from persistent storage before this callback is invoked. \n\t *                            Parameters passed to the onMessageDelivered callback are:\n\t *                            <ol>   \n\t *                            <li>{@link Messaging.Message} that was delivered.\n\t *                            </ol>    \n\t * @property {function} onMessageArrived called when a message has arrived in this Messaging.client. \n\t *                            Parameters passed to the onMessageArrived callback are:\n\t *                            <ol>   \n\t *                            <li>{@link Messaging.Message} that has arrived.\n\t *                            </ol>    \n\t */\n\tvar Client = function (host, port, path, clientId) {\n\t    \n\t    var uri;\n\t    \n\t\tif (typeof host !== \"string\")\n\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof host, \"host\"]));\n\t    \n\t    if (arguments.length == 2) {\n\t        // host: must be full ws:// uri\n\t        // port: clientId\n\t        clientId = port;\n\t        uri = host;\n\t        var match = uri.match(/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/);\n\t        if (match) {\n\t            host = match[4]||match[2];\n\t            port = parseInt(match[7]);\n\t            path = match[8];\n\t        } else {\n\t            throw new Error(format(ERROR.INVALID_ARGUMENT,[host,\"host\"]));\n\t        }\n\t    } else {\n\t        if (arguments.length == 3) {\n\t\t\t\tclientId = path;\n\t\t\t\tpath = \"/mqtt\";\n\t\t\t}\n\t\t\tif (typeof port !== \"number\" || port < 0)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof port, \"port\"]));\n\t\t\tif (typeof path !== \"string\")\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof path, \"path\"]));\n\t\t\t\n\t\t\tvar ipv6 = (host.indexOf(\":\") != -1);\n\t\t\turi = \"ws://\"+(ipv6?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t}\n\n\t\tvar clientIdLength = 0;\n\t\tfor (var i = 0; i<clientId.length; i++) {\n\t\t\tvar charCode = clientId.charCodeAt(i);                   \n\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)  {    \t\t\t\n\t\t\t\t i++; // Surrogate pair.\n\t\t\t}   \t\t   \n\t\t\tclientIdLength++;\n\t\t}     \t   \t\n\t\tif (typeof clientId !== \"string\" || clientIdLength < 1 | clientIdLength > 23)\n\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [clientId, \"clientId\"])); \n\t\t\n\t\tvar client = new ClientImpl(uri, host, port, path, clientId);\n\t\tthis._getHost =  function() { return host; };\n\t\tthis._setHost = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\t\t\t\n\t\tthis._getPort = function() { return port; };\n\t\tthis._setPort = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\n\t\tthis._getPath = function() { return path; };\n\t\tthis._setPath = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\n\t\tthis._getURI = function() { return uri; };\n\t\tthis._setURI = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\t\t\n\t\tthis._getClientId = function() { return client.clientId; };\n\t\tthis._setClientId = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\t\t\n\t\tthis._getOnConnectionLost = function() { return client.onConnectionLost; };\n\t\tthis._setOnConnectionLost = function(newOnConnectionLost) { \n\t\t\tif (typeof newOnConnectionLost === \"function\")\n\t\t\t\tclient.onConnectionLost = newOnConnectionLost;\n\t\t\telse \n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnectionLost, \"onConnectionLost\"]));\n\t\t};\n\n\t\tthis._getOnMessageDelivered = function() { return client.onMessageDelivered; };\n\t\tthis._setOnMessageDelivered = function(newOnMessageDelivered) { \n\t\t\tif (typeof newOnMessageDelivered === \"function\")\n\t\t\t\tclient.onMessageDelivered = newOnMessageDelivered;\n\t\t\telse \n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageDelivered, \"onMessageDelivered\"]));\n\t\t};\n\t   \n\t\tthis._getOnMessageArrived = function() { return client.onMessageArrived; };\n\t\tthis._setOnMessageArrived = function(newOnMessageArrived) { \n\t\t\tif (typeof newOnMessageArrived === \"function\")\n\t\t\t\tclient.onMessageArrived = newOnMessageArrived;\n\t\t\telse \n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageArrived, \"onMessageArrived\"]));\n\t\t};\n\t\t\n\t\t/** \n\t\t * Connect this Messaging client to its server. \n\t\t * \n\t\t * @name Messaging.Client#connect\n\t\t * @function\n\t\t * @param {Object} connectOptions - attributes used with the connection. \n\t\t * @param {number} connectOptions.timeout - If the connect has not succeeded within this \n\t\t *                    number of seconds, it is deemed to have failed.\n\t\t *                    The default is 30 seconds.\n\t\t * @param {string} connectOptions.userName - Authentication username for this connection.\n\t\t * @param {string} connectOptions.password - Authentication password for this connection.\n\t\t * @param {Messaging.Message} connectOptions.willMessage - sent by the server when the client\n\t\t *                    disconnects abnormally.\n\t\t * @param {Number} connectOptions.keepAliveInterval - the server disconnects this client if\n\t\t *                    there is no activity for this number of seconds.\n\t\t *                    The default value of 60 seconds is assumed if not set.\n\t\t * @param {boolean} connectOptions.cleanSession - if true(default) the client and server \n\t\t *                    persistent state is deleted on successful connect.\n\t\t * @param {boolean} connectOptions.useSSL - if present and true, use an SSL Websocket connection.\n\t\t * @param {object} connectOptions.invocationContext - passed to the onSuccess callback or onFailure callback.\n\t\t * @param {function} connectOptions.onSuccess - called when the connect acknowledgement \n\t\t *                    has been received from the server.\n\t\t * A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onSuccess method in the connectOptions.       \n\t\t * </ol>\n\t\t * @config {function} [onFailure] called when the connect request has failed or timed out.\n\t\t * A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onFailure method in the connectOptions.       \n\t\t * <li>errorCode a number indicating the nature of the error.\n\t\t * <li>errorMessage text describing the error.      \n\t\t * </ol>\n\t\t * @config {Array} [hosts] If present this contains either a set of hostnames or fully qualified\n\t\t * WebSocket URIs (ws://example.com:1883/mqtt), that are tried in order in place \n\t\t * of the host and port paramater on the construtor. The hosts are tried one at at time in order until\n\t\t * one of then succeeds.\n\t\t * @config {Array} [ports] If present the set of ports matching the hosts. If hosts contains URIs, this property\n\t\t * is not used.\n\t\t * @throws {InvalidState} if the client is not in disconnected state. The client must have received connectionLost\n\t\t * or disconnected before calling connect for a second or subsequent time.\n\t\t */\n\t\tthis.connect = function (connectOptions) {\n\t\t\tconnectOptions = connectOptions || {} ;\n\t\t\tvalidate(connectOptions,  {timeout:\"number\",\n\t\t\t\t\t\t\t\t\t   userName:\"string\", \n\t\t\t\t\t\t\t\t\t   password:\"string\", \n\t\t\t\t\t\t\t\t\t   willMessage:\"object\", \n\t\t\t\t\t\t\t\t\t   keepAliveInterval:\"number\", \n\t\t\t\t\t\t\t\t\t   cleanSession:\"boolean\", \n\t\t\t\t\t\t\t\t\t   useSSL:\"boolean\",\n\t\t\t\t\t\t\t\t\t   invocationContext:\"object\", \n\t\t\t\t\t\t\t\t\t   onSuccess:\"function\", \n\t\t\t\t\t\t\t\t\t   onFailure:\"function\",\n\t\t\t\t\t\t\t\t\t   hosts:\"object\",\n\t\t\t\t\t\t\t\t\t   ports:\"object\"});\n\t\t\t\n\t\t\t// If no keep alive interval is set, assume 60 seconds.\n\t\t\tif (connectOptions.keepAliveInterval === undefined)\n\t\t\t\tconnectOptions.keepAliveInterval = 60;\n\n\t\t\tif (connectOptions.willMessage) {\n\t\t\t\tif (!(connectOptions.willMessage instanceof Message))\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [connectOptions.willMessage, \"connectOptions.willMessage\"]));\n\t\t\t\t// The will message must have a payload that can be represented as a string.\n\t\t\t\t// Cause the willMessage to throw an exception if this is not the case.\n\t\t\t\tconnectOptions.willMessage.stringPayload;\n\t\t\t\t\n\t\t\t\tif (typeof connectOptions.willMessage.destinationName === \"undefined\")\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.willMessage.destinationName, \"connectOptions.willMessage.destinationName\"]));\n\t\t\t}\n\t\t\tif (typeof connectOptions.cleanSession === \"undefined\")\n\t\t\t\tconnectOptions.cleanSession = true;\n\t\t\tif (connectOptions.hosts) {\n\t\t\t    \n\t\t\t\tif (!(connectOptions.hosts instanceof Array) )\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\t\t\t\tif (connectOptions.hosts.length <1 )\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\t\t\t\t\n\t\t\t\tvar usingURIs = false;\n\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\tif (typeof connectOptions.hosts[i] !== \"string\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\tif (/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/.test(connectOptions.hosts[i])) {\n\t\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\t\tusingURIs = true;\n\t\t\t\t\t\t} else if (!usingURIs) {\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (usingURIs) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!usingURIs) {\n\t\t\t\t\tif (!connectOptions.ports)\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\tif (!(connectOptions.ports instanceof Array) )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\tif (connectOptions.hosts.length != connectOptions.ports.length)\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\n\t\t\t\t\tconnectOptions.uris = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\tif (typeof connectOptions.ports[i] !== \"number\" || connectOptions.ports[i] < 0)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.ports[i], \"connectOptions.ports[\"+i+\"]\"]));\n\t\t\t\t\t\tvar host = connectOptions.hosts[i];\n\t\t\t\t\t\tvar port = connectOptions.ports[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar ipv6 = (host.indexOf(\":\") != -1);\n\t\t\t\t\t\turi = \"ws://\"+(ipv6?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t\t\t\tconnectOptions.uris.push(uri);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconnectOptions.uris = connectOptions.hosts;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tclient.connect(connectOptions);\n\t\t};\n\t \n\t\t/** \n\t\t * Subscribe for messages, request receipt of a copy of messages sent to the destinations described by the filter.\n\t\t * \n\t\t * @name Messaging.Client#subscribe\n\t\t * @function\n\t\t * @param {string} filter describing the destinations to receive messages from.\n\t\t * <br>\n\t\t * @param {object} subscribeOptions - used to control the subscription\n\t\t *\n\t\t * @param {number} subscribeOptions.qos - the maiximum qos of any publications sent \n\t\t *                                  as a result of making this subscription.\n\t\t * @param {object} subscribeOptions.invocationContext - passed to the onSuccess callback \n\t\t *                                  or onFailure callback.\n\t\t * @param {function} subscribeOptions.onSuccess - called when the subscribe acknowledgement\n\t\t *                                  has been received from the server.\n\t\t *                                  A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext if set in the subscribeOptions.       \n\t\t *                                  </ol>\n\t\t * @param {function} subscribeOptions.onFailure - called when the subscribe request has failed or timed out.\n\t\t *                                  A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext - if set in the subscribeOptions.       \n\t\t *                                  <li>errorCode - a number indicating the nature of the error.\n\t\t *                                  <li>errorMessage - text describing the error.      \n\t\t *                                  </ol>\n\t\t * @param {number} subscribeOptions.timeout - which, if present, determines the number of\n\t\t *                                  seconds after which the onFailure calback is called.\n\t\t *                                  The presence of a timeout does not prevent the onSuccess\n\t\t *                                  callback from being called when the subscribe completes.         \n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\tthis.subscribe = function (filter, subscribeOptions) {\n\t\t\tif (typeof filter !== \"string\")\n\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\tsubscribeOptions = subscribeOptions || {} ;\n\t\t\tvalidate(subscribeOptions,  {qos:\"number\", \n\t\t\t\t\t\t\t\t\t\t invocationContext:\"object\", \n\t\t\t\t\t\t\t\t\t\t onSuccess:\"function\", \n\t\t\t\t\t\t\t\t\t\t onFailure:\"function\",\n\t\t\t\t\t\t\t\t\t\t timeout:\"number\"\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\tif (subscribeOptions.timeout && !subscribeOptions.onFailure)\n\t\t\t\tthrow new Error(\"subscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\tif (typeof subscribeOptions.qos !== \"undefined\" \n\t\t\t\t&& !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2 ))\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [subscribeOptions.qos, \"subscribeOptions.qos\"]));\n\t\t\tclient.subscribe(filter, subscribeOptions);\n\t\t};\n\n\t\t/**\n\t\t * Unsubscribe for messages, stop receiving messages sent to destinations described by the filter.\n\t\t * \n\t\t * @name Messaging.Client#unsubscribe\n\t\t * @function\n\t\t * @param {string} filter - describing the destinations to receive messages from.\n\t\t * @param {object} unsubscribeOptions - used to control the subscription\n\t\t * @param {object} unsubscribeOptions.invocationContext - passed to the onSuccess callback \n\t\t                                      or onFailure callback.\n\t\t * @param {function} unsubscribeOptions.onSuccess - called when the unsubscribe acknowledgement has been received from the server.\n\t\t *                                    A single response object parameter is passed to the \n\t\t *                                    onSuccess callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.     \n\t\t *                                    </ol>\n\t\t * @param {function} unsubscribeOptions.onFailure called when the unsubscribe request has failed or timed out.\n\t\t *                                    A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.       \n\t\t *                                    <li>errorCode - a number indicating the nature of the error.\n\t\t *                                    <li>errorMessage - text describing the error.      \n\t\t *                                    </ol>\n\t\t * @param {number} unsubscribeOptions.timeout - which, if present, determines the number of seconds\n\t\t *                                    after which the onFailure callback is called. The presence of\n\t\t *                                    a timeout does not prevent the onSuccess callback from being\n\t\t *                                    called when the unsubscribe completes\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\tthis.unsubscribe = function (filter, unsubscribeOptions) {\n\t\t\tif (typeof filter !== \"string\")\n\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\tunsubscribeOptions = unsubscribeOptions || {} ;\n\t\t\tvalidate(unsubscribeOptions,  {invocationContext:\"object\", \n\t\t\t\t\t\t\t\t\t\t   onSuccess:\"function\", \n\t\t\t\t\t\t\t\t\t\t   onFailure:\"function\",\n\t\t\t\t\t\t\t\t\t\t   timeout:\"number\"\n\t\t\t\t\t\t\t\t\t\t  });\n\t\t\tif (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure)\n\t\t\t\tthrow new Error(\"unsubscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\tclient.unsubscribe(filter, unsubscribeOptions);\n\t\t};\n\n\t\t/**\n\t\t * Send a message to the consumers of the destination in the Message.\n\t\t * \n\t\t * @name Messaging.Client#send\n\t\t * @function \n\t\t * @param {Messaging.Message} message to send.\n\t\t \n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */   \n\t\tthis.send = function (message) {       \t\n\t\t\tif (!(message instanceof Message))\n\t\t\t\tthrow new Error(\"Invalid argument:\"+typeof message);\n\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\tthrow new Error(\"Invalid parameter Message.destinationName:\"+message.destinationName);\n\t\t   \n\t\t\tclient.send(message);   \n\t\t};\n\t\t\n\t\t/** \n\t\t * Normal disconnect of this Messaging client from its server.\n\t\t * \n\t\t * @name Messaging.Client#disconnect\n\t\t * @function\n\t\t * @throws {InvalidState} if the client is already disconnected.     \n\t\t */\n\t\tthis.disconnect = function () {\n\t\t\tclient.disconnect();\n\t\t};\n\t\t\n\t\t/** \n\t\t * Get the contents of the trace log.\n\t\t * \n\t\t * @name Messaging.Client#getTraceLog\n\t\t * @function\n\t\t * @return {Object[]} tracebuffer containing the time ordered trace records.\n\t\t */\n\t\tthis.getTraceLog = function () {\n\t\t\treturn client.getTraceLog();\n\t\t}\n\t\t\n\t\t/** \n\t\t * Start tracing.\n\t\t * \n\t\t * @name Messaging.Client#startTrace\n\t\t * @function\n\t\t */\n\t\tthis.startTrace = function () {\n\t\t\tclient.startTrace();\n\t\t};\n\t\t\n\t\t/** \n\t\t * Stop tracing.\n\t\t * \n\t\t * @name Messaging.Client#stopTrace\n\t\t * @function\n\t\t */\n\t\tthis.stopTrace = function () {\n\t\t\tclient.stopTrace();\n\t\t};\n\t};\n\n\tClient.prototype = {\n\t\tget host() { return this._getHost(); },\n\t\tset host(newHost) { this._setHost(newHost); },\n\t\t\t\n\t\tget port() { return this._getPort(); },\n\t\tset port(newPort) { this._setPort(newPort); },\n\n\t\tget path() { return this._getPath(); },\n\t\tset path(newPath) { this._setPath(newPath); },\n\t\t\t\n\t\tget clientId() { return this._getClientId(); },\n\t\tset clientId(newClientId) { this._setClientId(newClientId); },\n\n\t\tget onConnectionLost() { return this._getOnConnectionLost(); },\n\t\tset onConnectionLost(newOnConnectionLost) { this._setOnConnectionLost(newOnConnectionLost); },\n\n\t\tget onMessageDelivered() { return this._getOnMessageDelivered(); },\n\t\tset onMessageDelivered(newOnMessageDelivered) { this._setOnMessageDelivered(newOnMessageDelivered); },\n\t\t\n\t\tget onMessageArrived() { return this._getOnMessageArrived(); },\n\t\tset onMessageArrived(newOnMessageArrived) { this._setOnMessageArrived(newOnMessageArrived); }\n\t};\n\t\n\t/** \n\t * An application message, sent or received.\n\t * <p>\n\t * All attributes may be null, which implies the default values.\n\t * \n\t * @name Messaging.Message\n\t * @constructor\n\t * @param {String|ArrayBuffer} payload The message data to be sent.\n\t * <p>\n\t * @property {string} payloadString <i>read only</i> The payload as a string if the payload consists of valid UTF-8 characters.\n\t * @property {ArrayBuffer} payloadBytes <i>read only</i> The payload as an ArrayBuffer.\n\t * <p>\n\t * @property {string} destinationName <b>mandatory</b> The name of the destination to which the message is to be sent\n\t *                    (for messages about to be sent) or the name of the destination from which the message has been received.\n\t *                    (for messages received by the onMessage function).\n\t * <p>\n\t * @property {number} qos The Quality of Service used to deliver the message.\n\t * <dl>\n\t *     <dt>0 Best effort (default).\n\t *     <dt>1 At least once.\n\t *     <dt>2 Exactly once.     \n\t * </dl>\n\t * <p>\n\t * @property {Boolean} retained If true, the message is to be retained by the server and delivered \n\t *                     to both current and future subscriptions.\n\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages. \n\t *                     A received message has the retained boolean set to true if the message was published \n\t *                     with the retained boolean set to true\n\t *                     and the subscrption was made after the message has been published. \n\t * <p>\n\t * @property {Boolean} duplicate <i>read only</i> If true, this message might be a duplicate of one which has already been received. \n\t *                     This is only set on messages received from the server.\n\t *                     \n\t */\n\tvar Message = function (newPayload) {  \n\t\tvar payload;\n\t\tif (   typeof newPayload === \"string\" \n\t\t\t|| newPayload instanceof ArrayBuffer\n\t\t\t|| newPayload instanceof Int8Array\n\t\t\t|| newPayload instanceof Uint8Array\n\t\t\t|| newPayload instanceof Int16Array\n\t\t\t|| newPayload instanceof Uint16Array\n\t\t\t|| newPayload instanceof Int32Array\n\t\t\t|| newPayload instanceof Uint32Array\n\t\t\t|| newPayload instanceof Float32Array\n\t\t\t|| newPayload instanceof Float64Array\n\t\t   ) {\n\t\t\tpayload = newPayload;\n\t\t} else {\n\t\t\tthrow (format(ERROR.INVALID_ARGUMENT, [newPayload, \"newPayload\"]));\n\t\t}\n\n\t\tthis._getPayloadString = function () {\n\t\t\tif (typeof payload === \"string\")\n\t\t\t\treturn payload;\n\t\t\telse\n\t\t\t\treturn parseUTF8(payload, 0, payload.length); \n\t\t};\n\n\t\tthis._getPayloadBytes = function() {\n\t\t\tif (typeof payload === \"string\") {\n\t\t\t\tvar buffer = new ArrayBuffer(UTF8Length(payload));\n\t\t\t\tvar byteStream = new Uint8Array(buffer); \n\t\t\t\tstringToUTF8(payload, byteStream, 0);\n\n\t\t\t\treturn byteStream;\n\t\t\t} else {\n\t\t\t\treturn payload;\n\t\t\t};\n\t\t};\n\n\t\tvar destinationName = undefined;\n\t\tthis._getDestinationName = function() { return destinationName; };\n\t\tthis._setDestinationName = function(newDestinationName) { \n\t\t\tif (typeof newDestinationName === \"string\")\n\t\t\t\tdestinationName = newDestinationName;\n\t\t\telse \n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newDestinationName, \"newDestinationName\"]));\n\t\t};\n\t\t\t\t\n\t\tvar qos = 0;\n\t\tthis._getQos = function() { return qos; };\n\t\tthis._setQos = function(newQos) { \n\t\t\tif (newQos === 0 || newQos === 1 || newQos === 2 )\n\t\t\t\tqos = newQos;\n\t\t\telse \n\t\t\t\tthrow new Error(\"Invalid argument:\"+newQos);\n\t\t};\n\n\t\tvar retained = false;\n\t\tthis._getRetained = function() { return retained; };\n\t\tthis._setRetained = function(newRetained) { \n\t\t\tif (typeof newRetained === \"boolean\")\n\t\t\t\tretained = newRetained;\n\t\t\telse \n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newRetained, \"newRetained\"]));\n\t\t};\n\t\t\n\t\tvar duplicate = false;\n\t\tthis._getDuplicate = function() { return duplicate; };\n\t\tthis._setDuplicate = function(newDuplicate) { duplicate = newDuplicate; };\n\t};\n\t\n\tMessage.prototype = {\n\t\tget payloadString() { return this._getPayloadString(); },\n\t\tget payloadBytes() { return this._getPayloadBytes(); },\n\t\t\n\t\tget destinationName() { return this._getDestinationName(); },\n\t\tset destinationName(newDestinationName) { this._setDestinationName(newDestinationName); },\n\t\t\n\t\tget qos() { return this._getQos(); },\n\t\tset qos(newQos) { this._setQos(newQos); },\n\n\t\tget retained() { return this._getRetained(); },\n\t\tset retained(newRetained) { this._setRetained(newRetained); },\n\n\t\tget duplicate() { return this._getDuplicate(); },\n\t\tset duplicate(newDuplicate) { this._setDuplicate(newDuplicate); }\n\t};\n\t   \n\t// Module contents.\n\treturn {\n\t\tClient: Client,\n\t\tMessage: Message\n\t};\n})(window);\n"}